{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Commonest {\n   public static void main(String[] args) {\n      String commonest = \"\";    // just a placeholder for now\n      int commonest_count = -1; // same\n      int n = args.length;\n      for (int i=0; i<n; i++) {\n         // count how many times args[i] occurred\n         int count = 0;\n         for (int j=0; j<n; j++)\n            if (args[i].equals(args[j])) count++;\n\n\n         // we found a new commonest word\n         if (count > commonest_count) {\n            commonest = args[i];\n            commonest_count = count;\n         }\n      }\n      System.out.println(commonest);\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22
        }
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class Commonest {\n   public static void main(String[] args) {\n      String commonest = \"\";    // just a placeholder for now\n      int commonest_count = -1; // same\n      int n = args.length;\n      for (int i=0; i<n; i++) {\n         // count how many times args[i] occurred",
        "\n\n\n\n\n\n",
        "         // we found a new commonest word\n         if (count > commonest_count) {\n            commonest = args[i];\n            commonest_count = count;\n         }\n      }\n      System.out.println(commonest);\n   }\n}"
    ],
    "combined_with_initial": [
        false,
        "Line 13, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n         int count = 0;\n         for (int j=0; j<n; j++)\n            if (args[i].equals(args[j])) count++;\n\n\n"
    ],
    "reference_snippets": [
        "\n         int count=0;\n         for (int j=0; j<n; j++) {       // look everywhere\n            if (args[i].equals(args[j])) // when you find it\n               count++;                  // count it\n         }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Commonest {\n   public static void main(String[] args) {\n      String commonest = \"\";    // just a placeholder for now\n      int commonest_count = -1; // same\n      int n = args.length;\n      for (int i=0; i<n; i++) {\n         // count how many times args[i] occurred\n         int count=0;\n         for (int j=0; j<n; j++) {       // look everywhere\n            if (args[i].equals(args[j])) // when you find it\n               count++;                  // count it\n         }\n         // we found a new commonest word\n         if (count > commonest_count) {\n            commonest = args[i];\n            commonest_count = count;\n         }\n      }\n      System.out.println(commonest);\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Commonest {\n   public static void main(String[] args) {\n      String commonest = \"\";    // just a placeholder for now\n      int commonest_count = -1; // same\n      int n = args.length;\n      for (int i=0; i<n; i++) {\n         // count how many times args[i] occurred\n         int count=0;\n         for (int j=0; j<n; j++) {       // look everywhere\n            if (args[i].equals(args[j])) // when you find it\n               count++;                  // count it\n         }\n         // we found a new commonest word\n         if (count > commonest_count) {\n            commonest = args[i];\n            commonest_count = count;\n         }\n      }\n      System.out.println(commonest);\n   }\n}\n"
}
