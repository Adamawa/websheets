{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class LinkIt {\n   // helper class\n   private class Node {\n      private String value; // value in this item\n      private Node next;    // reference to next item\n      private Node(String v, Node n) { // constructor\n         value = v;\n         next = n;\n      }\n   }\n   \n   private Node first;    // reference to first item\n   \n   // construct a new empty list\n   public LinkIt() {\n      first = null;\n   }\n   \n   // insert new string at start\n   public void insertFirst(String s) {\n      first = new Node(s, first);\n   }\n   \n   // convert to string, separated by spaces\n   public String toString() {\n      StringBuilder sb = new StringBuilder();\n      Node curr = first;\n      while (curr != null) {\n         sb.append(curr.value + \" \");\n         curr = curr.next;\n      }\n      return sb.toString();\n   }\n   \n   // reverse the items in the list\n   public void reverse() {\n      if (first == null || first.next == null) return;\n\n      Node prev = null;\n      Node succ = first;\n      while (succ != null) {\n         Node tmp = succ.next;\n         succ.next = prev;\n         prev = succ;\n         succ = tmp;\n      }\n      first = prev;\n\n   }\n   \n   // delete the kth item from the list, where the first is k=1\n   // throw RuntimeException if list is empty or index is invalid (k < 1)\n   public void deleteKth(int k) {\n      // deleting from an empty list or from index less than 1 never makes sense\n      if ( first == null || k < 1 )\n         throw new RuntimeException(\"Invalid index!\");\n      \n      // now delete the item, and throw an exception if the item doesn't exist\n      if (k==1) first = first.next;\n      else {\n         Node curr=first;\n         for (int i=1; i<k-1; i++) {\n            curr = curr.next;\n            if (curr.next == null) throw new RuntimeException();\n         }\n         curr.next = curr.next.next;\n      }\n      \n\n\n\n\n\n\n   }\n   \n   // helper method for testing\n   // values[0] in first node, then values[1], etc\n   public static LinkIt fromStrings(String[] values) {\n      LinkIt result = new LinkIt();\n      for (int i=values.length-1; i>=0; i--)\n         result.insertFirst(values[i]);\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      String[] testWords1 = {\"is\", \"this\", \"code\", \"working\", \"well?\"};\n      LinkIt test1 = fromStrings(testWords1);\n      test1.reverse();\n      StdOut.println(test1); // should be: well? working code this is\n      test1.reverse();\n      StdOut.println(test1); // should be: is this code working well?\n   \n      LinkIt test2 = fromStrings(new String[]{\"mull\", \"over\", \"null\", \"well\"});\n      test2.deleteKth(3);\n      StdOut.println(test2); // should be: mull over well\n      test2.deleteKth(1);\n      StdOut.println(test2); // should be: over well\n      test2.deleteKth(2);\n      StdOut.println(test2); // should be: over\n   }\n}\n",
        {
            "10": 8,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "104": 102,
            "105": 103,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "9": 7,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97
        }
    ],
    "combined_with_initial": [
        false,
        "Line 45:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class LinkIt {\n   // helper class\n   private class Node {\n      private String value; // value in this item\n      private Node next;    // reference to next item\n      private Node(String v, Node n) { // constructor\n         value = v;\n         next = n;\n      }\n   }\n   \n   private Node first;    // reference to first item\n   \n   // construct a new empty list\n   public LinkIt() {\n      first = null;\n   }\n   \n   // insert new string at start\n   public void insertFirst(String s) {\n      first = new Node(s, first);\n   }\n   \n   // convert to string, separated by spaces\n   public String toString() {\n      StringBuilder sb = new StringBuilder();\n      Node curr = first;\n      while (curr != null) {\n         sb.append(curr.value + \" \");\n         curr = curr.next;\n      }\n      return sb.toString();\n   }\n   \n   // reverse the items in the list\n   public void reverse() {\n      Node prev = null;\n      Node curr = first;\n      while (curr != null) {\n         Node newcurr = curr.next;\n         curr.next = prev;\n         prev = curr;\n         curr = newcurr;            \n      }\n      first = prev;\n   }\n   \n   // delete the kth item from the list, where the first is k=1\n   // throw RuntimeException if list is empty or index is invalid (k < 1)\n   public void deleteKth(int k) {\n      // deleting from an empty list or from index less than 1 never makes sense\n      if ( first == null || k < 1 )\n         throw new RuntimeException(\"Invalid index!\");\n      \n      // now delete the item, and throw an exception if the item doesn't exist\n      if (k == 1) {\n         // this is the only case where first changes\n         first = first.next;\n      }\n      else {\n         Node curr = first;\n         // access the (k-1)st node\n         for (int i=1; i<k-1; i++) {\n            if (curr == null)\n               throw new RuntimeException(\"Invalid index!\");\n            curr = curr.next;\n         }\n         // link (k-1)st to (k+1)st\n         if (curr == null || curr.next == null)\n            throw new RuntimeException(\"Invalid index!\");\n         curr.next = curr.next.next;\n      }\n   }\n   \n   // helper method for testing\n   // values[0] in first node, then values[1], etc\n   public static LinkIt fromStrings(String[] values) {\n      LinkIt result = new LinkIt();\n      for (int i=values.length-1; i>=0; i--)\n         result.insertFirst(values[i]);\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      String[] testWords1 = {\"is\", \"this\", \"code\", \"working\", \"well?\"};\n      LinkIt test1 = fromStrings(testWords1);\n      test1.reverse();\n      StdOut.println(test1); // should be: well? working code this is\n      test1.reverse();\n      StdOut.println(test1); // should be: is this code working well?\n   \n      LinkIt test2 = fromStrings(new String[]{\"mull\", \"over\", \"null\", \"well\"});\n      test2.deleteKth(3);\n      StdOut.println(test2); // should be: mull over well\n      test2.deleteKth(1);\n      StdOut.println(test2); // should be: over well\n      test2.deleteKth(2);\n      StdOut.println(test2); // should be: over\n   }\n}\n",
        {
            "10": 8,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "9": 7,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97
        }
    ],
    "daveagp": [
        "\n      if (first == null || first.next == null) return;\n\n      Node prev = null;\n      Node succ = first;\n      while (succ != null) {\n         Node tmp = succ.next;\n         succ.next = prev;\n         prev = succ;\n         succ = tmp;\n      }\n      first = prev;\n\n",
        " first == null || k < 1 ",
        "\n      if (k==1) first = first.next;\n      else {\n         Node curr=first;\n         for (int i=1; i<k-1; i++) {\n            curr = curr.next;\n            if (curr.next == null) throw new RuntimeException();\n         }\n         curr.next = curr.next.next;\n      }\n      \n\n\n\n\n\n\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n",
        "                        ",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class LinkIt {\n   // helper class\n   private class Node {\n      private String value; // value in this item\n      private Node next;    // reference to next item\n      private Node(String v, Node n) { // constructor\n         value = v;\n         next = n;\n      }\n   }\n   \n   private Node first;    // reference to first item\n   \n   // construct a new empty list\n   public LinkIt() {\n      first = null;\n   }\n   \n   // insert new string at start\n   public void insertFirst(String s) {\n      first = new Node(s, first);\n   }\n   \n   // convert to string, separated by spaces\n   public String toString() {\n      StringBuilder sb = new StringBuilder();\n      Node curr = first;\n      while (curr != null) {\n         sb.append(curr.value + \" \");\n         curr = curr.next;\n      }\n      return sb.toString();\n   }\n   \n   // reverse the items in the list\n   public void reverse() {",
        "\n\n\n\n\n\n\n\n\n\n",
        "   }\n   \n   // delete the kth item from the list, where the first is k=1\n   // throw RuntimeException if list is empty or index is invalid (k < 1)\n   public void deleteKth(int k) {\n      // deleting from an empty list or from index less than 1 never makes sense\n      if (",
        "                        ",
        ")\n         throw new RuntimeException(\"Invalid index!\");\n      \n      // now delete the item, and throw an exception if the item doesn't exist",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   }\n   \n   // helper method for testing\n   // values[0] in first node, then values[1], etc\n   public static LinkIt fromStrings(String[] values) {\n      LinkIt result = new LinkIt();\n      for (int i=values.length-1; i>=0; i--)\n         result.insertFirst(values[i]);\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      String[] testWords1 = {\"is\", \"this\", \"code\", \"working\", \"well?\"};\n      LinkIt test1 = fromStrings(testWords1);\n      test1.reverse();\n      StdOut.println(test1); // should be: well? working code this is\n      test1.reverse();\n      StdOut.println(test1); // should be: is this code working well?\n   \n      LinkIt test2 = fromStrings(new String[]{\"mull\", \"over\", \"null\", \"well\"});\n      test2.deleteKth(3);\n      StdOut.println(test2); // should be: mull over well\n      test2.deleteKth(1);\n      StdOut.println(test2); // should be: over well\n      test2.deleteKth(2);\n      StdOut.println(test2); // should be: over\n   }\n}"
    ],
    "reference_snippets": [
        "\n      Node prev = null;\n      Node curr = first;\n      while (curr != null) {\n         Node newcurr = curr.next;\n         curr.next = prev;\n         prev = curr;\n         curr = newcurr;            \n      }\n      first = prev;\n",
        " first == null || k < 1 ",
        "\n      if (k == 1) {\n         // this is the only case where first changes\n         first = first.next;\n      }\n      else {\n         Node curr = first;\n         // access the (k-1)st node\n         for (int i=1; i<k-1; i++) {\n            if (curr == null)\n               throw new RuntimeException(\"Invalid index!\");\n            curr = curr.next;\n         }\n         // link (k-1)st to (k+1)st\n         if (curr == null || curr.next == null)\n            throw new RuntimeException(\"Invalid index!\");\n         curr.next = curr.next.next;\n      }\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class LinkIt {\n   // helper class\n   private class Node {\n      private String value; // value in this item\n      private Node next;    // reference to next item\n      private Node(String v, Node n) { // constructor\n         value = v;\n         next = n;\n      }\n   }\n   \n   private Node first;    // reference to first item\n   \n   // construct a new empty list\n   public LinkIt() {\n      first = null;\n   }\n   \n   // insert new string at start\n   public void insertFirst(String s) {\n      first = new Node(s, first);\n   }\n   \n   // convert to string, separated by spaces\n   public String toString() {\n      StringBuilder sb = new StringBuilder();\n      Node curr = first;\n      while (curr != null) {\n         sb.append(curr.value + \" \");\n         curr = curr.next;\n      }\n      return sb.toString();\n   }\n   \n   // reverse the items in the list\n   public void reverse() {\n      Node prev = null;\n      Node curr = first;\n      while (curr != null) {\n         Node newcurr = curr.next;\n         curr.next = prev;\n         prev = curr;\n         curr = newcurr;            \n      }\n      first = prev;\n   }\n   \n   // delete the kth item from the list, where the first is k=1\n   // throw RuntimeException if list is empty or index is invalid (k < 1)\n   public void deleteKth(int k) {\n      // deleting from an empty list or from index less than 1 never makes sense\n      if ( first == null || k < 1 )\n         throw new RuntimeException(\"Invalid index!\");\n      \n      // now delete the item, and throw an exception if the item doesn't exist\n      if (k == 1) {\n         // this is the only case where first changes\n         first = first.next;\n      }\n      else {\n         Node curr = first;\n         // access the (k-1)st node\n         for (int i=1; i<k-1; i++) {\n            if (curr == null)\n               throw new RuntimeException(\"Invalid index!\");\n            curr = curr.next;\n         }\n         // link (k-1)st to (k+1)st\n         if (curr == null || curr.next == null)\n            throw new RuntimeException(\"Invalid index!\");\n         curr.next = curr.next.next;\n      }\n   }\n   \n   // helper method for testing\n   // values[0] in first node, then values[1], etc\n   public static LinkIt fromStrings(String[] values) {\n      LinkIt result = new LinkIt();\n      for (int i=values.length-1; i>=0; i--)\n         result.insertFirst(values[i]);\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      String[] testWords1 = {\"is\", \"this\", \"code\", \"working\", \"well?\"};\n      LinkIt test1 = fromStrings(testWords1);\n      test1.reverse();\n      StdOut.println(test1); // should be: well? working code this is\n      test1.reverse();\n      StdOut.println(test1); // should be: is this code working well?\n   \n      LinkIt test2 = fromStrings(new String[]{\"mull\", \"over\", \"null\", \"well\"});\n      test2.deleteKth(3);\n      StdOut.println(test2); // should be: mull over well\n      test2.deleteKth(1);\n      StdOut.println(test2); // should be: over well\n      test2.deleteKth(2);\n      StdOut.println(test2); // should be: over\n   }\n}\n"
}
