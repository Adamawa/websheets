{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Evaluate {\n   public static int evaluate(String expression) {\n      // here -1 means 'not found yet'\n      int plusPos = -1; // position of last '+' outside of parentheses\n      int timesPos = -1; // position of last '*' outside of parentheses\n   \n      // scan expression, looking for operators outside of parentheses\n      int level = 0; // current nesting depth\n      for (int i=0; i<expression.length(); i++) {\n         char ch = expression.charAt(i);\n   \n         // look for operator\n         if (ch=='+' && level==0) plusPos = i;\n         if (ch=='*' && level==0) timesPos = i;\n     \n         // count level of parentheses\n         if (ch=='(') level++;\n         if (ch==')') level--;\n      }\n      \n      // recurse on lowest-precedence operator\n   \n      if (plusPos != -1) {\n         // break down, e.g. \"3*4+5*6\" => \"3*4\" and \"5*6\"\n         String exprLeft = expression.substring(0, plusPos);\n         String exprRight = expression.substring(plusPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft + valueRight;\n      }\n      else if (timesPos != -1) {\n         // break down, e.g. \"(3+4)*(5+6)\" => \"(3+4)\" and \"(5+6)\"\n         String exprLeft = expression.substring(0, timesPos);\n         String exprRight = expression.substring(timesPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft * valueRight;\n      }\n      else if (expression.charAt(0)=='(') {\n         // everything was in a matched pair of parentheses\n         // break down, e.g. \"(3*4)\" => \"3*4\"\n         return evaluate(expression.substring(1, expression.length()-1));\n      }\n      else {\n         // base case: just a number. convert expression to int.\n         // don't make any recursive calls\n         return  Integer.parseInt(expression) ;\n      }\n   }\n   \n   public static void main(String[] args) {\n      String test = \"1*2+3*(4+5)\";\n      StdOut.println(test + \" evaluates to \" + evaluate(test));\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 37:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Evaluate {\n   public static int evaluate(String expression) {\n      // here -1 means 'not found yet'\n      int plusPos = -1; // position of last '+' outside of parentheses\n      int timesPos = -1; // position of last '*' outside of parentheses\n   \n      // scan expression, looking for operators outside of parentheses\n      int level = 0; // current nesting depth\n      for (int i=0; i<expression.length(); i++) {\n         char ch = expression.charAt(i);\n   \n         // look for operator\n         if (ch=='+' && level==0) plusPos = i;\n         if (ch=='*' && level==0) timesPos = i;\n     \n         // count level of parentheses\n         if (ch=='(') level++;\n         if (ch==')') level--;\n      }\n      \n      // recurse on lowest-precedence operator\n   \n      if (plusPos != -1) {\n         // break down, e.g. \"3*4+5*6\" => \"3*4\" and \"5*6\"\n         String exprLeft = expression.substring(0, plusPos);\n         String exprRight = expression.substring(plusPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft + valueRight;\n      }\n      else if (timesPos != -1) {\n         // break down, e.g. \"(3+4)*(5+6)\" => \"(3+4)\" and \"(5+6)\"\n         String exprLeft = expression.substring(0, timesPos);\n         String exprRight = expression.substring(timesPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft * valueRight;\n      }\n      else if (expression.charAt(0)=='(') {\n         // everything was in a matched pair of parentheses\n         // break down, e.g. \"(3*4)\" => \"3*4\"\n         return evaluate(expression.substring(1, expression.length()-1));\n      }\n      else {\n         // base case: just a number. convert expression to int.\n         // don't make any recursive calls\n         return  Integer.parseInt(expression) ;\n      }\n   }\n   \n   public static void main(String[] args) {\n      String test = \"1*2+3*(4+5)\";\n      StdOut.println(test + \" evaluates to \" + evaluate(test));\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft * valueRight;\n",
        " Integer.parseInt(expression) "
    ],
    "initial_snippets": [
        "\n\n\n\n",
        "                              "
    ],
    "json_template": [
        "public class Evaluate {\n   public static int evaluate(String expression) {\n      // here -1 means 'not found yet'\n      int plusPos = -1; // position of last '+' outside of parentheses\n      int timesPos = -1; // position of last '*' outside of parentheses\n   \n      // scan expression, looking for operators outside of parentheses\n      int level = 0; // current nesting depth\n      for (int i=0; i<expression.length(); i++) {\n         char ch = expression.charAt(i);\n   \n         // look for operator\n         if (ch=='+' && level==0) plusPos = i;\n         if (ch=='*' && level==0) timesPos = i;\n     \n         // count level of parentheses\n         if (ch=='(') level++;\n         if (ch==')') level--;\n      }\n      \n      // recurse on lowest-precedence operator\n   \n      if (plusPos != -1) {\n         // break down, e.g. \"3*4+5*6\" => \"3*4\" and \"5*6\"\n         String exprLeft = expression.substring(0, plusPos);\n         String exprRight = expression.substring(plusPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft + valueRight;\n      }\n      else if (timesPos != -1) {\n         // break down, e.g. \"(3+4)*(5+6)\" => \"(3+4)\" and \"(5+6)\"\n         String exprLeft = expression.substring(0, timesPos);\n         String exprRight = expression.substring(timesPos+1);",
        "\n\n\n\n",
        "      }\n      else if (expression.charAt(0)=='(') {\n         // everything was in a matched pair of parentheses\n         // break down, e.g. \"(3*4)\" => \"3*4\"\n         return evaluate(expression.substring(1, expression.length()-1));\n      }\n      else {\n         // base case: just a number. convert expression to int.\n         // don't make any recursive calls\n         return ",
        "                              ",
        ";\n      }\n   }\n   \n   public static void main(String[] args) {\n      String test = \"1*2+3*(4+5)\";\n      StdOut.println(test + \" evaluates to \" + evaluate(test));\n   }\n}"
    ],
    "reference_snippets": [
        "\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft * valueRight;\n",
        " Integer.parseInt(expression) "
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Evaluate {\n   public static int evaluate(String expression) {\n      // here -1 means 'not found yet'\n      int plusPos = -1; // position of last '+' outside of parentheses\n      int timesPos = -1; // position of last '*' outside of parentheses\n   \n      // scan expression, looking for operators outside of parentheses\n      int level = 0; // current nesting depth\n      for (int i=0; i<expression.length(); i++) {\n         char ch = expression.charAt(i);\n   \n         // look for operator\n         if (ch=='+' && level==0) plusPos = i;\n         if (ch=='*' && level==0) timesPos = i;\n     \n         // count level of parentheses\n         if (ch=='(') level++;\n         if (ch==')') level--;\n      }\n      \n      // recurse on lowest-precedence operator\n   \n      if (plusPos != -1) {\n         // break down, e.g. \"3*4+5*6\" => \"3*4\" and \"5*6\"\n         String exprLeft = expression.substring(0, plusPos);\n         String exprRight = expression.substring(plusPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft + valueRight;\n      }\n      else if (timesPos != -1) {\n         // break down, e.g. \"(3+4)*(5+6)\" => \"(3+4)\" and \"(5+6)\"\n         String exprLeft = expression.substring(0, timesPos);\n         String exprRight = expression.substring(timesPos+1);\n         int valueLeft = evaluate(exprLeft);\n         int valueRight = evaluate(exprRight);\n         return valueLeft * valueRight;\n      }\n      else if (expression.charAt(0)=='(') {\n         // everything was in a matched pair of parentheses\n         // break down, e.g. \"(3*4)\" => \"3*4\"\n         return evaluate(expression.substring(1, expression.length()-1));\n      }\n      else {\n         // base case: just a number. convert expression to int.\n         // don't make any recursive calls\n         return  Integer.parseInt(expression) ;\n      }\n   }\n   \n   public static void main(String[] args) {\n      String test = \"1*2+3*(4+5)\";\n      StdOut.println(test + \" evaluates to \" + evaluate(test));\n   }\n}\n"
}
