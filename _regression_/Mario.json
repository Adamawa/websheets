{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Mario {\n   public static int maxPath(int[][] cellValue) {\n      int m = cellValue.length;    // height\n      int n = cellValue[0].length; // width\n   \n      // opt[i][j]: max value attainable if starting at position [i][j]\n      int[][] opt = new int[m][n];\n      // base case: corner\n      opt[m-1][n-1] = cellValue[m-1][n-1];\n      // pseudo-base case: right column, have to go down\n      for (int i=m-2; i>=0; i--)\n         opt[i][n-1] = cellValue[i][n-1] + opt[i+1][n-1];\n      // pseudo-base case: bottom row, have to go right\n      for (int j =n-2; j>=0; j-- )\n          opt[m-1][j] = cellValue[m-1][j] + opt[m-1][j+1] ;\n      // general case\n      for (int i =m-2; i>=0; i-- ) {\n         for (int j =n-2; j>=0; j-- ) {\n            // a choice! take better choice of down and right\n            opt[i][j] = cellValue[i][j] + Math. max ( opt[i+1][j] ,\n                                                        opt[i][j+1] );\n         }\n      }\n      // value in top-left corner\n      return  opt[0][0] ;\n   }\n   \n   public static void main(String[] args) {\n      int[][] testRoom =\n       {{1, 1, 0, 2, 0},\n        {0, 2, 0, 2, 0},\n        {0, 1, 0, 0, 1},\n        {3, 0, 0, 0, 1}};\n      StdOut.println(maxPath(testRoom));\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37
        }
    ],
    "initial_snippets": [
        "                 ",
        "                                                 ",
        "                 ",
        "                 ",
        "     ",
        "             ",
        "             ",
        "           "
    ],
    "json_template": [
        "public class Mario {\n   public static int maxPath(int[][] cellValue) {\n      int m = cellValue.length;    // height\n      int n = cellValue[0].length; // width\n   \n      // opt[i][j]: max value attainable if starting at position [i][j]\n      int[][] opt = new int[m][n];\n      // base case: corner\n      opt[m-1][n-1] = cellValue[m-1][n-1];\n      // pseudo-base case: right column, have to go down\n      for (int i=m-2; i>=0; i--)\n         opt[i][n-1] = cellValue[i][n-1] + opt[i+1][n-1];\n      // pseudo-base case: bottom row, have to go right\n      for (int j",
        "                 ",
        ")\n         ",
        "                                                 ",
        ";\n      // general case\n      for (int i",
        "                 ",
        ") {\n         for (int j",
        "                 ",
        ") {\n            // a choice! take better choice of down and right\n            opt[i][j] = cellValue[i][j] + Math.",
        "     ",
        "(",
        "             ",
        ",\n                                                       ",
        "             ",
        ");\n         }\n      }\n      // value in top-left corner\n      return ",
        "           ",
        ";\n   }\n   \n   public static void main(String[] args) {\n      int[][] testRoom =\n       {{1, 1, 0, 2, 0},\n        {0, 2, 0, 2, 0},\n        {0, 1, 0, 0, 1},\n        {3, 0, 0, 0, 1}};\n      StdOut.println(maxPath(testRoom));\n   }\n}"
    ],
    "combined_with_initial": [
        false,
        "Line 14:\nmust not be empty"
    ],
    "daveagp": [
        " =n-2; j>=0; j-- ",
        " opt[m-1][j] = cellValue[m-1][j] + opt[m-1][j+1] ",
        " =m-2; i>=0; i-- ",
        " =n-2; j>=0; j-- ",
        " max ",
        " opt[i+1][j] ",
        " opt[i][j+1] ",
        " opt[0][0] "
    ],
    "reference_snippets": [
        " =n-2; j>=0; j-- ",
        " opt[m-1][j] = cellValue[m-1][j] + opt[m-1][j+1] ",
        " =m-2; i>=0; i-- ",
        " =n-2; j>=0; j-- ",
        " max ",
        " opt[i+1][j] ",
        " opt[i][j+1] ",
        " opt[0][0] "
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Mario {\n   public static int maxPath(int[][] cellValue) {\n      int m = cellValue.length;    // height\n      int n = cellValue[0].length; // width\n   \n      // opt[i][j]: max value attainable if starting at position [i][j]\n      int[][] opt = new int[m][n];\n      // base case: corner\n      opt[m-1][n-1] = cellValue[m-1][n-1];\n      // pseudo-base case: right column, have to go down\n      for (int i=m-2; i>=0; i--)\n         opt[i][n-1] = cellValue[i][n-1] + opt[i+1][n-1];\n      // pseudo-base case: bottom row, have to go right\n      for (int j =n-2; j>=0; j-- )\n          opt[m-1][j] = cellValue[m-1][j] + opt[m-1][j+1] ;\n      // general case\n      for (int i =m-2; i>=0; i-- ) {\n         for (int j =n-2; j>=0; j-- ) {\n            // a choice! take better choice of down and right\n            opt[i][j] = cellValue[i][j] + Math. max ( opt[i+1][j] ,\n                                                        opt[i][j+1] );\n         }\n      }\n      // value in top-left corner\n      return  opt[0][0] ;\n   }\n   \n   public static void main(String[] args) {\n      int[][] testRoom =\n       {{1, 1, 0, 2, 0},\n        {0, 2, 0, 2, 0},\n        {0, 1, 0, 0, 1},\n        {3, 0, 0, 0, 1}};\n      StdOut.println(maxPath(testRoom));\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Mario {\n   public static int maxPath(int[][] cellValue) {\n      int m = cellValue.length;    // height\n      int n = cellValue[0].length; // width\n   \n      // opt[i][j]: max value attainable if starting at position [i][j]\n      int[][] opt = new int[m][n];\n      // base case: corner\n      opt[m-1][n-1] = cellValue[m-1][n-1];\n      // pseudo-base case: right column, have to go down\n      for (int i=m-2; i>=0; i--)\n         opt[i][n-1] = cellValue[i][n-1] + opt[i+1][n-1];\n      // pseudo-base case: bottom row, have to go right\n      for (int j =n-2; j>=0; j-- )\n          opt[m-1][j] = cellValue[m-1][j] + opt[m-1][j+1] ;\n      // general case\n      for (int i =m-2; i>=0; i-- ) {\n         for (int j =n-2; j>=0; j-- ) {\n            // a choice! take better choice of down and right\n            opt[i][j] = cellValue[i][j] + Math. max ( opt[i+1][j] ,\n                                                        opt[i][j+1] );\n         }\n      }\n      // value in top-left corner\n      return  opt[0][0] ;\n   }\n   \n   public static void main(String[] args) {\n      int[][] testRoom =\n       {{1, 1, 0, 2, 0},\n        {0, 2, 0, 2, 0},\n        {0, 1, 0, 0, 1},\n        {3, 0, 0, 0, 1}};\n      StdOut.println(maxPath(testRoom));\n   }\n}\n"
}
