{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Quote {\n\n   // helper linked-list data type, contains a word and reference to next card\n   private class Card {\n      private String word;\n      private Card next;\n\n      // create a new Card containing this word\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // the first card in null-terminated linked list\n   private Card start;\n\n   // constructor - create an empty quote\n   public Quote() {\n      start = null;\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n      Card newCard = new Card(w);\n\n      // special case when w is first word\n      if (start == null)\n         start = newCard;\n \n      // otherwise, traverse list until card points to last word\n      else {\n         Card card = start; \n         while (card.next != null) {\n            card =  card.next;  \n         }\n\n         // add card for new word to end of list\n         card.next  = newCard;\n      } \n   }\n   \n   // number of words in the quote\n   public int count() {\n      int total = 0;\n      for (Card card = start;  card != null ;  card = card.next )\n         total++;\n      return total;\n   }\n\n   // return the kth word where k = 1 is first word in quote\n   public String getWord(int k) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) {\n         throw new RuntimeException(\"index out of bounds\");\n      }\n       \n      Card card = start;\n      for (int count = 1;  count < k ;  count++ )\n         card = card.next;\n      return  card.word;  \n   }\n\n   // insert w after the kth word, where k = 1 is the first word \n   public void insertWord(int k, String w) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) \n         throw new RuntimeException(\"index out of bounds\");\n\n      // make Card for the new word, place it after the kth card\n      Card newCard =  new Card(w) ;\n      Card card = start;\n      for (int i = 1; i < k; i++) {card = card.next; }\n      newCard.next = card.next;  \n      card.next = newCard;  \n   }\n\n   // string representation of the quote   \n   public String toString(){\n      String s = \"\";\n      for (Card card = start; card != null; card = card.next)\n         s = s + card.word + \" \";\n      return s;\n   }\n\n   public static void main(String[] args) { \n      Quote q = new Quote();\n      q.addWord(\"A\");\n      q.addWord(\"rose\");\n      q.addWord(\"is\");\n      q.addWord(\"a\");\n      q.addWord(\"rose.\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n      StdOut.println(q.getWord(2));\n      q.insertWord(3, \"just\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n   }\n}\n",
        {
            "10": 8,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "9": 7,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97
        }
    ],
    "combined_with_initial": [
        false,
        "Line 35:\nmust have exactly one semicolon, at the end"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Quote {\n\n   // helper linked-list data type, contains a word and reference to next card\n   private class Card {\n      private String word;\n      private Card next;\n\n      // create a new Card containing this word\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // the first card in null-terminated linked list\n   private Card start;\n\n   // constructor - create an empty quote\n   public Quote() {\n      start = null;\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n      Card newCard = new Card(w);\n\n      // special case when w is first word\n      if (start == null)\n         start = newCard;\n \n      // otherwise, traverse list until card points to last word\n      else {\n         Card card = start; \n         while (card.next != null) {\n            card =  card.next;  \n         }\n\n         // add card for new word to end of list\n         card.next  = newCard;\n      } \n   }\n   \n   // number of words in the quote\n   public int count() {\n      int total = 0;\n      for (Card card = start;  card != null ;  card = card.next )\n         total++;\n      return total;\n   }\n\n   // return the kth word where k = 1 is first word in quote\n   public String getWord(int k) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) {\n         throw new RuntimeException(\"index out of bounds\");\n      }\n       \n      Card card = start;\n      for (int count = 1;  count < k ;  count++ )\n         card = card.next;\n      return  card.word;  \n   }\n\n   // insert w after the kth word, where k = 1 is the first word \n   public void insertWord(int k, String w) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) \n         throw new RuntimeException(\"index out of bounds\");\n\n      // make Card for the new word, place it after the kth card\n      Card newCard =  new Card(w) ;\n      Card card = start;\n      for (int i = 1; i < k; i++) {card = card.next; }\n      newCard.next = card.next;  \n      card.next = newCard;  \n   }\n\n   // string representation of the quote   \n   public String toString(){\n      String s = \"\";\n      for (Card card = start; card != null; card = card.next)\n         s = s + card.word + \" \";\n      return s;\n   }\n\n   public static void main(String[] args) { \n      Quote q = new Quote();\n      q.addWord(\"A\");\n      q.addWord(\"rose\");\n      q.addWord(\"is\");\n      q.addWord(\"a\");\n      q.addWord(\"rose.\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n      StdOut.println(q.getWord(2));\n      q.insertWord(3, \"just\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n   }\n}\n",
        {
            "10": 8,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "9": 7,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97
        }
    ],
    "daveagp": [
        " card.next; ",
        " card.next ",
        " card != null ",
        " card = card.next ",
        " count < k ",
        " count++ ",
        " card.word; ",
        " new Card(w) ",
        " newCard.next = card.next; ",
        " card.next = newCard; "
    ],
    "initial_snippets": [
        "            ",
        "           ",
        "              ",
        "                  ",
        "           ",
        "         ",
        "            ",
        "             ",
        "                           ",
        "                      "
    ],
    "json_template": [
        "public class Quote {\n\n   // helper linked-list data type, contains a word and reference to next card\n   private class Card {\n      private String word;\n      private Card next;\n\n      // create a new Card containing this word\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // the first card in null-terminated linked list\n   private Card start;\n\n   // constructor - create an empty quote\n   public Quote() {\n      start = null;\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n      Card newCard = new Card(w);\n\n      // special case when w is first word\n      if (start == null)\n         start = newCard;\n \n      // otherwise, traverse list until card points to last word\n      else {\n         Card card = start; \n         while (card.next != null) {\n            card = ",
        "            ",
        " \n         }\n\n         // add card for new word to end of list\n        ",
        "           ",
        " = newCard;\n      } \n   }\n   \n   // number of words in the quote\n   public int count() {\n      int total = 0;\n      for (Card card = start; ",
        "              ",
        "; ",
        "                  ",
        ")\n         total++;\n      return total;\n   }\n\n   // return the kth word where k = 1 is first word in quote\n   public String getWord(int k) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) {\n         throw new RuntimeException(\"index out of bounds\");\n      }\n       \n      Card card = start;\n      for (int count = 1; ",
        "           ",
        "; ",
        "         ",
        ")\n         card = card.next;\n      return ",
        "            ",
        " \n   }\n\n   // insert w after the kth word, where k = 1 is the first word \n   public void insertWord(int k, String w) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) \n         throw new RuntimeException(\"index out of bounds\");\n\n      // make Card for the new word, place it after the kth card\n      Card newCard = ",
        "             ",
        ";\n      Card card = start;\n      for (int i = 1; i < k; i++) {card = card.next; }\n     ",
        "                           ",
        " \n     ",
        "                      ",
        " \n   }\n\n   // string representation of the quote   \n   public String toString(){\n      String s = \"\";\n      for (Card card = start; card != null; card = card.next)\n         s = s + card.word + \" \";\n      return s;\n   }\n\n   public static void main(String[] args) { \n      Quote q = new Quote();\n      q.addWord(\"A\");\n      q.addWord(\"rose\");\n      q.addWord(\"is\");\n      q.addWord(\"a\");\n      q.addWord(\"rose.\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n      StdOut.println(q.getWord(2));\n      q.insertWord(3, \"just\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n   }\n}"
    ],
    "reference_snippets": [
        " card.next; ",
        " card.next ",
        " card != null ",
        " card = card.next ",
        " count < k ",
        " count++ ",
        " card.word; ",
        " new Card(w) ",
        " newCard.next = card.next; ",
        " card.next = newCard; "
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Quote {\n\n   // helper linked-list data type, contains a word and reference to next card\n   private class Card {\n      private String word;\n      private Card next;\n\n      // create a new Card containing this word\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // the first card in null-terminated linked list\n   private Card start;\n\n   // constructor - create an empty quote\n   public Quote() {\n      start = null;\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n      Card newCard = new Card(w);\n\n      // special case when w is first word\n      if (start == null)\n         start = newCard;\n \n      // otherwise, traverse list until card points to last word\n      else {\n         Card card = start; \n         while (card.next != null) {\n            card =  card.next;  \n         }\n\n         // add card for new word to end of list\n         card.next  = newCard;\n      } \n   }\n   \n   // number of words in the quote\n   public int count() {\n      int total = 0;\n      for (Card card = start;  card != null ;  card = card.next )\n         total++;\n      return total;\n   }\n\n   // return the kth word where k = 1 is first word in quote\n   public String getWord(int k) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) {\n         throw new RuntimeException(\"index out of bounds\");\n      }\n       \n      Card card = start;\n      for (int count = 1;  count < k ;  count++ )\n         card = card.next;\n      return  card.word;  \n   }\n\n   // insert w after the kth word, where k = 1 is the first word \n   public void insertWord(int k, String w) {\n      // check for less than k words in quote or invalid index\n      if (count() < k || k <= 0) \n         throw new RuntimeException(\"index out of bounds\");\n\n      // make Card for the new word, place it after the kth card\n      Card newCard =  new Card(w) ;\n      Card card = start;\n      for (int i = 1; i < k; i++) {card = card.next; }\n      newCard.next = card.next;  \n      card.next = newCard;  \n   }\n\n   // string representation of the quote   \n   public String toString(){\n      String s = \"\";\n      for (Card card = start; card != null; card = card.next)\n         s = s + card.word + \" \";\n      return s;\n   }\n\n   public static void main(String[] args) { \n      Quote q = new Quote();\n      q.addWord(\"A\");\n      q.addWord(\"rose\");\n      q.addWord(\"is\");\n      q.addWord(\"a\");\n      q.addWord(\"rose.\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n      StdOut.println(q.getWord(2));\n      q.insertWord(3, \"just\");\n      StdOut.println(q);\n      StdOut.println(q.count());\n   }\n}\n"
}
