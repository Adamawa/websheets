{
    "combined_with_daveagp": [
        false,
        "Line 64, editable region 1:\nmust not be empty"
    ],
    "combined_with_initial": [
        false,
        "Line 64, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class FoodPart2 {\n   /******************************************************************* \n    Reference solution for Spring 2013 COS 126 Programming Exam 1\n    Foodlympics Part Two: Gourmet Glory\n   \n    Author:       COS 126 Staff\n    Netid:        cos126\n    Precepts:     lots of them\n    Dependencies: StdIn, StdOut\n    Usage:        java FoodPart2 N\n    \n    Description:  Reads in names and scores for C countries. Prints out the N\n                  top-score countries in order. \n      \n   **************************************************************************/\n   \n       // find the highest value in scores. set this value to 0, and \n       // return the corresponding element of countries.\n       public static String best(String[] countries, int[] scores) {\n           // number of countries\n           int C = countries.length;\n   \n           // bestIndex is the index of the (earliest) max-score country\n           int bestIndex = -1; \n           \n           // max is the maximum score seen so far\n           int max = Integer.MIN_VALUE;\n           \n           // find index of max-score country\n           for (int i = 0; i < C; i++) {\n               if (scores[i] > max) {\n                   max = scores[i];\n                   bestIndex = i;\n               }\n           }\n           \n           // do required update and return the winner\n           scores[bestIndex] = 0;\n           return countries[bestIndex];\n       }\n   \n       // read in a file of scores, and take N from the command-line.\n       // then print out the top N ranking countries from best to worst.\n       public static void main(String[] args) {\n   \n           int C = StdIn.readInt();           // number of countries\n           int N = Integer.parseInt(args[0]); // how many to rank\n   \n           String[] countries = new String[C];\n           int[] scores = new int[C];\n   \n           // read the rest of the input\n           for (int i = 0; i < C; i++) {\n               countries[i] = StdIn.readString();\n               scores[i] = StdIn.readInt();\n           }\n           \n           // now print the results\n           for (int i = 0; i < N; i++) {\n               String nextRanked = best(countries, scores);\n               StdOut.println(\"Rank \" + (i+1) + \": \" + nextRanked);\n           }\n       }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class FoodPart2 {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "reference_snippets": [
        "\n   /******************************************************************* \n    Reference solution for Spring 2013 COS 126 Programming Exam 1\n    Foodlympics Part Two: Gourmet Glory\n   \n    Author:       COS 126 Staff\n    Netid:        cos126\n    Precepts:     lots of them\n    Dependencies: StdIn, StdOut\n    Usage:        java FoodPart2 N\n    \n    Description:  Reads in names and scores for C countries. Prints out the N\n                  top-score countries in order. \n      \n   **************************************************************************/\n   \n       // find the highest value in scores. set this value to 0, and \n       // return the corresponding element of countries.\n       public static String best(String[] countries, int[] scores) {\n           // number of countries\n           int C = countries.length;\n   \n           // bestIndex is the index of the (earliest) max-score country\n           int bestIndex = -1; \n           \n           // max is the maximum score seen so far\n           int max = Integer.MIN_VALUE;\n           \n           // find index of max-score country\n           for (int i = 0; i < C; i++) {\n               if (scores[i] > max) {\n                   max = scores[i];\n                   bestIndex = i;\n               }\n           }\n           \n           // do required update and return the winner\n           scores[bestIndex] = 0;\n           return countries[bestIndex];\n       }\n   \n       // read in a file of scores, and take N from the command-line.\n       // then print out the top N ranking countries from best to worst.\n       public static void main(String[] args) {\n   \n           int C = StdIn.readInt();           // number of countries\n           int N = Integer.parseInt(args[0]); // how many to rank\n   \n           String[] countries = new String[C];\n           int[] scores = new int[C];\n   \n           // read the rest of the input\n           for (int i = 0; i < C; i++) {\n               countries[i] = StdIn.readString();\n               scores[i] = StdIn.readInt();\n           }\n           \n           // now print the results\n           for (int i = 0; i < N; i++) {\n               String nextRanked = best(countries, scores);\n               StdOut.println(\"Rank \" + (i+1) + \": \" + nextRanked);\n           }\n       }\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class FoodPart2 {\n   /******************************************************************* \n    Reference solution for Spring 2013 COS 126 Programming Exam 1\n    Foodlympics Part Two: Gourmet Glory\n   \n    Author:       COS 126 Staff\n    Netid:        cos126\n    Precepts:     lots of them\n    Dependencies: StdIn, StdOut\n    Usage:        java FoodPart2 N\n    \n    Description:  Reads in names and scores for C countries. Prints out the N\n                  top-score countries in order. \n      \n   **************************************************************************/\n   \n       // find the highest value in scores. set this value to 0, and \n       // return the corresponding element of countries.\n       public static String best(String[] countries, int[] scores) {\n           // number of countries\n           int C = countries.length;\n   \n           // bestIndex is the index of the (earliest) max-score country\n           int bestIndex = -1; \n           \n           // max is the maximum score seen so far\n           int max = Integer.MIN_VALUE;\n           \n           // find index of max-score country\n           for (int i = 0; i < C; i++) {\n               if (scores[i] > max) {\n                   max = scores[i];\n                   bestIndex = i;\n               }\n           }\n           \n           // do required update and return the winner\n           scores[bestIndex] = 0;\n           return countries[bestIndex];\n       }\n   \n       // read in a file of scores, and take N from the command-line.\n       // then print out the top N ranking countries from best to worst.\n       public static void main(String[] args) {\n   \n           int C = StdIn.readInt();           // number of countries\n           int N = Integer.parseInt(args[0]); // how many to rank\n   \n           String[] countries = new String[C];\n           int[] scores = new int[C];\n   \n           // read the rest of the input\n           for (int i = 0; i < C; i++) {\n               countries[i] = StdIn.readString();\n               scores[i] = StdIn.readInt();\n           }\n           \n           // now print the results\n           for (int i = 0; i < N; i++) {\n               String nextRanked = best(countries, scores);\n               StdOut.println(\"Rank \" + (i+1) + \": \" + nextRanked);\n           }\n       }\n}\n"
}
