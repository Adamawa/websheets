{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\nimport java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.ForkJoinPool;\npublic class FJSort {\n   public static void main(String[] args) {\n      int SIZE = 2_000_000;\n      int[] list = new int[SIZE];\n        \n      for (int i = 0; i < SIZE; i++)\n         list[i] = (int)(Math.random() * Integer.MAX_VALUE);\n\n      int maxProc = Runtime.getRuntime().availableProcessors();\n\n      // timing[i] : time to sort on i processors\n      long[] timing = new long[maxProc+1];\n\n      for (int i=1; i<=maxProc; i++)\n        timing[i] = parallelMergeSort((int[])list.clone(), i);\n \n      for (int i=2; i<=maxProc; i++)\n         if (!(timing[i] < timing[i-1]/1.05))\n           throw new RuntimeException(\"More processors should make it faster!\");\n    }\n    \n    public static long parallelMergeSort(int[] list, int proc) {\n       long startTime = System.currentTimeMillis();\n\n       ForkJoinPool pool = new ForkJoinPool(proc);\n       pool.invoke(new SortTask(list));\n       pool.shutdown();\n       while (!pool.isTerminated()) Thread.yield();\n\n       long time = System.currentTimeMillis() - startTime;\n       System.out.println(\"Time with \"+proc+\" processors is \"+time+\" ms\");\n       return time;\n    }  \n    \n    private static class SortTask extends RecursiveAction {\n       private int[] list;\n       SortTask(int[] list) { this.list = list; }\n        \n       @Override\n       protected void compute() {\n          if (list.length < 2) return; // base case\n\n          // split into halves  \n          int[] firstHalf = new int[list.length / 2];\n          System.arraycopy(list, 0, firstHalf, 0, list.length / 2);\n          int secondHalfLength = list.length - list.length / 2;\n          int[] secondHalf = new int[secondHalfLength];\n          System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);\n                \n          // recursively sort the two halves\n          invokeAll(new SortTask(firstHalf),\n                    new SortTask(secondHalf));\n          // merge halves together\n          merge(firstHalf, secondHalf, list);\n      }\n   }\n\n   public static void merge(int[] list1, int[] list2, int[] merged) {\n      int i1 = 0, i2 = 0, i3 = 0; // index in list1, list2, out\n        \n      while (i1 < list1.length && i2 < list2.length) \n         merged[i3++] = (list1[i1] < list2[i2]) ? list1[i1++] : list2[i2++];\n      \n      // any trailing ends        \n      while (i1 < list1.length) merged[i3++] = list1[i1++];\n      while (i2 < list2.length) merged[i3++] = list2[i2++];\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        true,
        "package combined.initial;\nimport stdlibpack.*;\nimport java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.ForkJoinPool;\npublic class FJSort {\n   public static void main(String[] args) {\n      int SIZE = 2_000_000;\n      int[] list = new int[SIZE];\n        \n      for (int i = 0; i < SIZE; i++)\n         list[i] = (int)(Math.random() * Integer.MAX_VALUE);\n\n      int maxProc = Runtime.getRuntime().availableProcessors();\n\n      // timing[i] : time to sort on i processors\n      long[] timing = new long[maxProc+1];\n\n      for (int i=1; i<=maxProc; i++)\n        timing[i] = parallelMergeSort((int[])list.clone(), i);\n \n      for (int i=2; i<=maxProc; i++)\n         if (!(timing[i] < timing[i-1]/1.05))\n           throw new RuntimeException(\"More processors should make it faster!\");\n    }\n    \n    public static long parallelMergeSort(int[] list, int proc) {\n       long startTime = System.currentTimeMillis();\n\n       ForkJoinPool pool = new ForkJoinPool(proc);\n       pool.invoke(new SortTask(list));\n       pool.shutdown();\n       while (!pool.isTerminated()) Thread.yield();\n\n       long time = System.currentTimeMillis() - startTime;\n       System.out.println(\"Time with \"+proc+\" processors is \"+time+\" ms\");\n       return time;\n    }  \n    \n    private static class SortTask extends RecursiveAction {\n       private int[] list;\n       SortTask(int[] list) { this.list = list; }\n        \n       @Override\n       protected void compute() {\n          if (list.length < 2) return; // base case\n\n          // split into halves  \n          int[] firstHalf = new int[list.length / 2];\n          System.arraycopy(list, 0, firstHalf, 0, list.length / 2);\n          int secondHalfLength = list.length - list.length / 2;\n          int[] secondHalf = new int[secondHalfLength];\n          System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);\n                \n          // recursively sort the two halves\n       new SortTask(firstHalf).invoke();\n       new SortTask(secondHalf).invoke();\n          // merge halves together\n          merge(firstHalf, secondHalf, list);\n      }\n   }\n\n   public static void merge(int[] list1, int[] list2, int[] merged) {\n      int i1 = 0, i2 = 0, i3 = 0; // index in list1, list2, out\n        \n      while (i1 < list1.length && i2 < list2.length) \n         merged[i3++] = (list1[i1] < list2[i2]) ? list1[i1++] : list2[i2++];\n      \n      // any trailing ends        \n      while (i1 < list1.length) merged[i3++] = list1[i1++];\n      while (i2 < list2.length) merged[i3++] = list2[i2++];\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\nimport java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.ForkJoinPool;\npublic class FJSort {\n   public static void main(String[] args) {\n      int SIZE = 2_000_000;\n      int[] list = new int[SIZE];\n        \n      for (int i = 0; i < SIZE; i++)\n         list[i] = (int)(Math.random() * Integer.MAX_VALUE);\n\n      int maxProc = Runtime.getRuntime().availableProcessors();\n\n      // timing[i] : time to sort on i processors\n      long[] timing = new long[maxProc+1];\n\n      for (int i=1; i<=maxProc; i++)\n        timing[i] = parallelMergeSort((int[])list.clone(), i);\n \n      for (int i=2; i<=maxProc; i++)\n         if (!(timing[i] < timing[i-1]/1.05))\n           throw new RuntimeException(\"More processors should make it faster!\");\n    }\n    \n    public static long parallelMergeSort(int[] list, int proc) {\n       long startTime = System.currentTimeMillis();\n\n       ForkJoinPool pool = new ForkJoinPool(proc);\n       pool.invoke(new SortTask(list));\n       pool.shutdown();\n       while (!pool.isTerminated()) Thread.yield();\n\n       long time = System.currentTimeMillis() - startTime;\n       System.out.println(\"Time with \"+proc+\" processors is \"+time+\" ms\");\n       return time;\n    }  \n    \n    private static class SortTask extends RecursiveAction {\n       private int[] list;\n       SortTask(int[] list) { this.list = list; }\n        \n       @Override\n       protected void compute() {\n          if (list.length < 2) return; // base case\n\n          // split into halves  \n          int[] firstHalf = new int[list.length / 2];\n          System.arraycopy(list, 0, firstHalf, 0, list.length / 2);\n          int secondHalfLength = list.length - list.length / 2;\n          int[] secondHalf = new int[secondHalfLength];\n          System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);\n                \n          // recursively sort the two halves\n          invokeAll(new SortTask(firstHalf),\n                    new SortTask(secondHalf));\n          // merge halves together\n          merge(firstHalf, secondHalf, list);\n      }\n   }\n\n   public static void merge(int[] list1, int[] list2, int[] merged) {\n      int i1 = 0, i2 = 0, i3 = 0; // index in list1, list2, out\n        \n      while (i1 < list1.length && i2 < list2.length) \n         merged[i3++] = (list1[i1] < list2[i2]) ? list1[i1++] : list2[i2++];\n      \n      // any trailing ends        \n      while (i1 < list1.length) merged[i3++] = list1[i1++];\n      while (i2 < list2.length) merged[i3++] = list2[i2++];\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n          invokeAll(new SortTask(firstHalf),\n                    new SortTask(secondHalf));\n"
    ],
    "initial_snippets": [
        "\n       new SortTask(firstHalf).invoke();\n       new SortTask(secondHalf).invoke();\n"
    ],
    "json_template": [
        "import java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.ForkJoinPool;\npublic class FJSort {\n   public static void main(String[] args) {\n      int SIZE = 2_000_000;\n      int[] list = new int[SIZE];\n        \n      for (int i = 0; i < SIZE; i++)\n         list[i] = (int)(Math.random() * Integer.MAX_VALUE);\n\n      int maxProc = Runtime.getRuntime().availableProcessors();\n\n      // timing[i] : time to sort on i processors\n      long[] timing = new long[maxProc+1];\n\n      for (int i=1; i<=maxProc; i++)\n        timing[i] = parallelMergeSort((int[])list.clone(), i);\n \n      for (int i=2; i<=maxProc; i++)\n         if (!(timing[i] < timing[i-1]/1.05))\n           throw new RuntimeException(\"More processors should make it faster!\");\n    }\n    \n    public static long parallelMergeSort(int[] list, int proc) {\n       long startTime = System.currentTimeMillis();\n\n       ForkJoinPool pool = new ForkJoinPool(proc);\n       pool.invoke(new SortTask(list));\n       pool.shutdown();\n       while (!pool.isTerminated()) Thread.yield();\n\n       long time = System.currentTimeMillis() - startTime;\n       System.out.println(\"Time with \"+proc+\" processors is \"+time+\" ms\");\n       return time;\n    }  \n    \n    private static class SortTask extends RecursiveAction {\n       private int[] list;\n       SortTask(int[] list) { this.list = list; }\n        \n       @Override\n       protected void compute() {\n          if (list.length < 2) return; // base case\n\n          // split into halves  \n          int[] firstHalf = new int[list.length / 2];\n          System.arraycopy(list, 0, firstHalf, 0, list.length / 2);\n          int secondHalfLength = list.length - list.length / 2;\n          int[] secondHalf = new int[secondHalfLength];\n          System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);\n                \n          // recursively sort the two halves",
        "\n       new SortTask(firstHalf).invoke();\n       new SortTask(secondHalf).invoke();\n",
        "          // merge halves together\n          merge(firstHalf, secondHalf, list);\n      }\n   }\n\n   public static void merge(int[] list1, int[] list2, int[] merged) {\n      int i1 = 0, i2 = 0, i3 = 0; // index in list1, list2, out\n        \n      while (i1 < list1.length && i2 < list2.length) \n         merged[i3++] = (list1[i1] < list2[i2]) ? list1[i1++] : list2[i2++];\n      \n      // any trailing ends        \n      while (i1 < list1.length) merged[i3++] = list1[i1++];\n      while (i2 < list2.length) merged[i3++] = list2[i2++];\n   }\n}"
    ],
    "reference_snippets": [
        "\n          invokeAll(new SortTask(firstHalf),\n                    new SortTask(secondHalf));\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\nimport java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.ForkJoinPool;\npublic class FJSort {\n   public static void main(String[] args) {\n      int SIZE = 2_000_000;\n      int[] list = new int[SIZE];\n        \n      for (int i = 0; i < SIZE; i++)\n         list[i] = (int)(Math.random() * Integer.MAX_VALUE);\n\n      int maxProc = Runtime.getRuntime().availableProcessors();\n\n      // timing[i] : time to sort on i processors\n      long[] timing = new long[maxProc+1];\n\n      for (int i=1; i<=maxProc; i++)\n        timing[i] = parallelMergeSort((int[])list.clone(), i);\n \n      for (int i=2; i<=maxProc; i++)\n         if (!(timing[i] < timing[i-1]/1.05))\n           throw new RuntimeException(\"More processors should make it faster!\");\n    }\n    \n    public static long parallelMergeSort(int[] list, int proc) {\n       long startTime = System.currentTimeMillis();\n\n       ForkJoinPool pool = new ForkJoinPool(proc);\n       pool.invoke(new SortTask(list));\n       pool.shutdown();\n       while (!pool.isTerminated()) Thread.yield();\n\n       long time = System.currentTimeMillis() - startTime;\n       System.out.println(\"Time with \"+proc+\" processors is \"+time+\" ms\");\n       return time;\n    }  \n    \n    private static class SortTask extends RecursiveAction {\n       private int[] list;\n       SortTask(int[] list) { this.list = list; }\n        \n       @Override\n       protected void compute() {\n          if (list.length < 2) return; // base case\n\n          // split into halves  \n          int[] firstHalf = new int[list.length / 2];\n          System.arraycopy(list, 0, firstHalf, 0, list.length / 2);\n          int secondHalfLength = list.length - list.length / 2;\n          int[] secondHalf = new int[secondHalfLength];\n          System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);\n                \n          // recursively sort the two halves\n          invokeAll(new SortTask(firstHalf),\n                    new SortTask(secondHalf));\n          // merge halves together\n          merge(firstHalf, secondHalf, list);\n      }\n   }\n\n   public static void merge(int[] list1, int[] list2, int[] merged) {\n      int i1 = 0, i2 = 0, i3 = 0; // index in list1, list2, out\n        \n      while (i1 < list1.length && i2 < list2.length) \n         merged[i3++] = (list1[i1] < list2[i2]) ? list1[i1++] : list2[i2++];\n      \n      // any trailing ends        \n      while (i1 < list1.length) merged[i3++] = list1[i1++];\n      while (i2 < list2.length) merged[i3++] = list2[i2++];\n   }\n}\n"
}
