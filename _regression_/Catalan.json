{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Catalan {\n   // this is just for reference. it is too slow for large n\n   public static long recursiveCat(int n) {\n      if (n==0)\n         return 1;\n      long result = 0;\n      for (int i=0; i<n; i++)\n         result += recursiveCat(i)*recursiveCat(n-i-1);\n      return result;\n   }\n   \n   public static long dynamicCat(int n) {\n      // intialize an array with indices from 0 to n\n      long[] dp =  new long[n+1] ;\n      // set the base case manually\n      dp[0] = 1 ;\n   \n      // compute the rest of the sequence\n      for (int k =1; k<=n; k++ ) {\n         for (int i=0; i<k; i++) \n            dp[k] += dp[i]*dp[k-i-1];\n      }\n      return dp[n];\n   }\n   \n   public static void main(String[] args) {\n      for (int i=0; i<=35; i++) {\n         StdOut.println(\"The \"+i+\"th Catalan number is \"+dynamicCat(i));\n      }\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 14, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Catalan {\n   // this is just for reference. it is too slow for large n\n   public static long recursiveCat(int n) {\n      if (n==0)\n         return 1;\n      long result = 0;\n      for (int i=0; i<n; i++)\n         result += recursiveCat(i)*recursiveCat(n-i-1);\n      return result;\n   }\n   \n   public static long dynamicCat(int n) {\n      // intialize an array with indices from 0 to n\n      long[] dp =  new long[n+1] ;\n      // set the base case manually\n      dp[0] = 1 ;\n   \n      // compute the rest of the sequence\n      for (int k =1; k<=n; k++ ) {\n         dp[k] = 0; // not necessary, but for clarity\n         for (int i=0; i<k; i++)\n            dp[k] += dp[i]*dp[k-i-1];\n      }\n      return dp[n];\n   }\n   \n   public static void main(String[] args) {\n      for (int i=0; i<=35; i++) {\n         StdOut.println(\"The \"+i+\"th Catalan number is \"+dynamicCat(i));\n      }\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        " new long[n+1] ",
        " dp[0] = 1 ",
        " =1; k<=n; k++ ",
        "\n         for (int i=0; i<k; i++) \n            dp[k] += dp[i]*dp[k-i-1];\n"
    ],
    "initial_snippets": [
        "               ",
        "           ",
        "               ",
        "\n\n\n\n"
    ],
    "json_template": [
        "public class Catalan {\n   // this is just for reference. it is too slow for large n\n   public static long recursiveCat(int n) {\n      if (n==0)\n         return 1;\n      long result = 0;\n      for (int i=0; i<n; i++)\n         result += recursiveCat(i)*recursiveCat(n-i-1);\n      return result;\n   }\n   \n   public static long dynamicCat(int n) {\n      // intialize an array with indices from 0 to n\n      long[] dp = ",
        "               ",
        ";\n      // set the base case manually\n     ",
        "           ",
        ";\n   \n      // compute the rest of the sequence\n      for (int k",
        "               ",
        ") {",
        "\n\n\n\n",
        "      }\n      return dp[n];\n   }\n   \n   public static void main(String[] args) {\n      for (int i=0; i<=35; i++) {\n         StdOut.println(\"The \"+i+\"th Catalan number is \"+dynamicCat(i));\n      }\n   }\n}"
    ],
    "reference_snippets": [
        " new long[n+1] ",
        " dp[0] = 1 ",
        " =1; k<=n; k++ ",
        "\n         dp[k] = 0; // not necessary, but for clarity\n         for (int i=0; i<k; i++)\n            dp[k] += dp[i]*dp[k-i-1];\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Catalan {\n   // this is just for reference. it is too slow for large n\n   public static long recursiveCat(int n) {\n      if (n==0)\n         return 1;\n      long result = 0;\n      for (int i=0; i<n; i++)\n         result += recursiveCat(i)*recursiveCat(n-i-1);\n      return result;\n   }\n   \n   public static long dynamicCat(int n) {\n      // intialize an array with indices from 0 to n\n      long[] dp =  new long[n+1] ;\n      // set the base case manually\n      dp[0] = 1 ;\n   \n      // compute the rest of the sequence\n      for (int k =1; k<=n; k++ ) {\n         dp[k] = 0; // not necessary, but for clarity\n         for (int i=0; i<k; i++)\n            dp[k] += dp[i]*dp[k-i-1];\n      }\n      return dp[n];\n   }\n   \n   public static void main(String[] args) {\n      for (int i=0; i<=35; i++) {\n         StdOut.println(\"The \"+i+\"th Catalan number is \"+dynamicCat(i));\n      }\n   }\n}\n"
}
