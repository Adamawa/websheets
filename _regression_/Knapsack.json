{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Knapsack {\n   public static int maxFits(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      boolean[][] canSteal = new boolean[numItems+1][capacity+1];\n      canSteal[0][0] = true;\n      \n      for (int i=1; i<=numItems; i++)\n         for (int j=0; j<=capacity; j++) {\n            canSteal[i][j] = canSteal[i-1][j];\n            if (itemWeights[i-1] <= j) canSteal[i][j] |= \n               canSteal[i-1][j-itemWeights[i-1]];\n      }\n\n      int result = 0;\n      for (int i=0; i<=capacity; i++)\n         if (canSteal[numItems][i]) result = i;\n\n      return result;\n\n\n\n\n\n\n\n\n\n\n\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      StdOut.println(maxFits(testWeights, 20)); // should be 18 (7+11)\n      StdOut.println(maxFits(testWeights, 100)); // should be 33 (5+7+10+11)\n      StdOut.println(maxFits(testWeights, 33)); // again, 33\n      StdOut.println(maxFits(testWeights, 32)); // 28 (7+10+11)\n      StdOut.println(maxFits(testWeights, 4)); // 0, nothing fits\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 30, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Knapsack {\n   public static int maxFits(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      \n      // find biggest weight <= capacity that can be made\n      int result = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) result = j;\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      StdOut.println(maxFits(testWeights, 20)); // should be 18 (7+11)\n      StdOut.println(maxFits(testWeights, 100)); // should be 33 (5+7+10+11)\n      StdOut.println(maxFits(testWeights, 33)); // again, 33\n      StdOut.println(maxFits(testWeights, 32)); // 28 (7+10+11)\n      StdOut.println(maxFits(testWeights, 4)); // 0, nothing fits\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n      boolean[][] canSteal = new boolean[numItems+1][capacity+1];\n      canSteal[0][0] = true;\n      \n      for (int i=1; i<=numItems; i++)\n         for (int j=0; j<=capacity; j++) {\n            canSteal[i][j] = canSteal[i-1][j];\n            if (itemWeights[i-1] <= j) canSteal[i][j] |= \n               canSteal[i-1][j-itemWeights[i-1]];\n      }\n\n      int result = 0;\n      for (int i=0; i<=capacity; i++)\n         if (canSteal[numItems][i]) result = i;\n\n      return result;\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class Knapsack {\n   public static int maxFits(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      StdOut.println(maxFits(testWeights, 20)); // should be 18 (7+11)\n      StdOut.println(maxFits(testWeights, 100)); // should be 33 (5+7+10+11)\n      StdOut.println(maxFits(testWeights, 33)); // again, 33\n      StdOut.println(maxFits(testWeights, 32)); // 28 (7+10+11)\n      StdOut.println(maxFits(testWeights, 4)); // 0, nothing fits\n   }\n}"
    ],
    "reference_snippets": [
        "\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      \n      // find biggest weight <= capacity that can be made\n      int result = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) result = j;\n      return result;\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Knapsack {\n   public static int maxFits(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      \n      // find biggest weight <= capacity that can be made\n      int result = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) result = j;\n      return result;\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      StdOut.println(maxFits(testWeights, 20)); // should be 18 (7+11)\n      StdOut.println(maxFits(testWeights, 100)); // should be 33 (5+7+10+11)\n      StdOut.println(maxFits(testWeights, 33)); // again, 33\n      StdOut.println(maxFits(testWeights, 32)); // 28 (7+10+11)\n      StdOut.println(maxFits(testWeights, 4)); // 0, nothing fits\n   }\n}\n"
}
