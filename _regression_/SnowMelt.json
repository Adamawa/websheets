{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class SnowMelt {\n   public static double meltage(double currSnow, int temp, int salt) {\n      double result = Math.pow(1 + currSnow, (temp - 32 + 2*salt)/18.0);\n      result = Math.min(currSnow, result);\n      //StdOut.println(5);\n      \n      return result;\n   }\n   \n   // formatted printing of a double[] array\n   public static void printArray(double[] arr) {\n      int N = arr.length;\n      for (int i = 0; i < N; i++)\n         StdOut.printf(\"%8.3f\", arr[i]);\n      \n      // new line after all entries printed\n      StdOut.println();\n   }\n   \n   // Part 2B: input data file from standard input\n   // input salt solution ints from command-line\n   // output remaining snow for each day for each salt solution\n   public static void main(String[] args) {\n      // store salt for scenarios\n      int N = args.length;\n      int[] salt = new int[N];\n      for (int i = 0; i < N; i++)\n         salt[i] = Integer.parseInt(args[i]);\n      \n      // array of snow left on ground for each scenario\n      double[] snowLeft = new double[N];\n      \n      // input snow in inches and temp in degrees F for each day\n      while (!StdIn.isEmpty()) {\n         // read data from standard input\n         double newSnow = StdIn.readDouble();\n         int temp = StdIn.readInt();\n         \n         // compute meltage for one day with each salt value\n         for (int i = 0; i < N; i++) {\n            snowLeft[i] = snowLeft[i] + newSnow;\n            double melt = meltage(snowLeft[i], temp, salt[i]);\n            // how much snow left after the melting?\n            snowLeft[i] = snowLeft[i] - melt;\n         }\n         printArray(snowLeft);\n      }\n   }\n   \n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 60, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class SnowMelt {\n/****************************************************************************\n * Name: Donna Gabai\n * NetID: dgabai\n * Precept: P99 \n * Spring14 Exam 1\n * \n * Description: Simulates how fast the snow will melt \n *              based on how much salt is used and temp\n * Dependencies: StdIn, StdOut\n * ***************************************************************************/\n    \n    // using current snow, temperature and salt solution\n    // how much snow will melt?\n    public static double meltage(double currSnow, int temp, int salt) {\n        double result = Math.pow(1 + currSnow, (temp - 32 + 2*salt)/18.0);\n        result = Math.min(currSnow, result);\n        return result;\n    }\n    \n    // formatted printing of a double[] array\n    public static void printArray(double[] arr) {\n        int N = arr.length;\n        for (int i = 0; i < N; i++)\n            StdOut.printf(\"%8.3f\", arr[i]);\n\n        // new line after all entries printed\n        StdOut.println();\n    }\n    \n    // Part 2B: input data file from standard input\n    // input salt solution ints from command-line\n    // output remaining snow for each day for each salt solution\n    public static void main(String[] args) {\n        // store salt for scenarios\n        int N = args.length;\n        int[] salt = new int[N];\n        for (int i = 0; i < N; i++)\n            salt[i] = Integer.parseInt(args[i]);\n            \n        // array of snow left on ground for each scenario\n        double[] snowLeft = new double[N];\n        \n        // input snow in inches and temp in degrees F for each day\n        while (!StdIn.isEmpty()) {\n            // read data from standard input\n            double newSnow = StdIn.readDouble();\n            int temp = StdIn.readInt();\n            \n            // compute meltage for one day with each salt value\n            for (int i = 0; i < N; i++) {\n                snowLeft[i] = snowLeft[i] + newSnow;\n                double melt = meltage(snowLeft[i], temp, salt[i]);\n                // how much snow left after the melting?\n                snowLeft[i] = snowLeft[i] - melt;\n            }\n            printArray(snowLeft);\n        }\n    }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n   public static double meltage(double currSnow, int temp, int salt) {\n      double result = Math.pow(1 + currSnow, (temp - 32 + 2*salt)/18.0);\n      result = Math.min(currSnow, result);\n      //StdOut.println(5);\n      \n      return result;\n   }\n   \n   // formatted printing of a double[] array\n   public static void printArray(double[] arr) {\n      int N = arr.length;\n      for (int i = 0; i < N; i++)\n         StdOut.printf(\"%8.3f\", arr[i]);\n      \n      // new line after all entries printed\n      StdOut.println();\n   }\n   \n   // Part 2B: input data file from standard input\n   // input salt solution ints from command-line\n   // output remaining snow for each day for each salt solution\n   public static void main(String[] args) {\n      // store salt for scenarios\n      int N = args.length;\n      int[] salt = new int[N];\n      for (int i = 0; i < N; i++)\n         salt[i] = Integer.parseInt(args[i]);\n      \n      // array of snow left on ground for each scenario\n      double[] snowLeft = new double[N];\n      \n      // input snow in inches and temp in degrees F for each day\n      while (!StdIn.isEmpty()) {\n         // read data from standard input\n         double newSnow = StdIn.readDouble();\n         int temp = StdIn.readInt();\n         \n         // compute meltage for one day with each salt value\n         for (int i = 0; i < N; i++) {\n            snowLeft[i] = snowLeft[i] + newSnow;\n            double melt = meltage(snowLeft[i], temp, salt[i]);\n            // how much snow left after the melting?\n            snowLeft[i] = snowLeft[i] - melt;\n         }\n         printArray(snowLeft);\n      }\n   }\n   \n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class SnowMelt {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "reference_snippets": [
        "\n/****************************************************************************\n * Name: Donna Gabai\n * NetID: dgabai\n * Precept: P99 \n * Spring14 Exam 1\n * \n * Description: Simulates how fast the snow will melt \n *              based on how much salt is used and temp\n * Dependencies: StdIn, StdOut\n * ***************************************************************************/\n    \n    // using current snow, temperature and salt solution\n    // how much snow will melt?\n    public static double meltage(double currSnow, int temp, int salt) {\n        double result = Math.pow(1 + currSnow, (temp - 32 + 2*salt)/18.0);\n        result = Math.min(currSnow, result);\n        return result;\n    }\n    \n    // formatted printing of a double[] array\n    public static void printArray(double[] arr) {\n        int N = arr.length;\n        for (int i = 0; i < N; i++)\n            StdOut.printf(\"%8.3f\", arr[i]);\n\n        // new line after all entries printed\n        StdOut.println();\n    }\n    \n    // Part 2B: input data file from standard input\n    // input salt solution ints from command-line\n    // output remaining snow for each day for each salt solution\n    public static void main(String[] args) {\n        // store salt for scenarios\n        int N = args.length;\n        int[] salt = new int[N];\n        for (int i = 0; i < N; i++)\n            salt[i] = Integer.parseInt(args[i]);\n            \n        // array of snow left on ground for each scenario\n        double[] snowLeft = new double[N];\n        \n        // input snow in inches and temp in degrees F for each day\n        while (!StdIn.isEmpty()) {\n            // read data from standard input\n            double newSnow = StdIn.readDouble();\n            int temp = StdIn.readInt();\n            \n            // compute meltage for one day with each salt value\n            for (int i = 0; i < N; i++) {\n                snowLeft[i] = snowLeft[i] + newSnow;\n                double melt = meltage(snowLeft[i], temp, salt[i]);\n                // how much snow left after the melting?\n                snowLeft[i] = snowLeft[i] - melt;\n            }\n            printArray(snowLeft);\n        }\n    }\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class SnowMelt {\n/****************************************************************************\n * Name: Donna Gabai\n * NetID: dgabai\n * Precept: P99 \n * Spring14 Exam 1\n * \n * Description: Simulates how fast the snow will melt \n *              based on how much salt is used and temp\n * Dependencies: StdIn, StdOut\n * ***************************************************************************/\n    \n    // using current snow, temperature and salt solution\n    // how much snow will melt?\n    public static double meltage(double currSnow, int temp, int salt) {\n        double result = Math.pow(1 + currSnow, (temp - 32 + 2*salt)/18.0);\n        result = Math.min(currSnow, result);\n        return result;\n    }\n    \n    // formatted printing of a double[] array\n    public static void printArray(double[] arr) {\n        int N = arr.length;\n        for (int i = 0; i < N; i++)\n            StdOut.printf(\"%8.3f\", arr[i]);\n\n        // new line after all entries printed\n        StdOut.println();\n    }\n    \n    // Part 2B: input data file from standard input\n    // input salt solution ints from command-line\n    // output remaining snow for each day for each salt solution\n    public static void main(String[] args) {\n        // store salt for scenarios\n        int N = args.length;\n        int[] salt = new int[N];\n        for (int i = 0; i < N; i++)\n            salt[i] = Integer.parseInt(args[i]);\n            \n        // array of snow left on ground for each scenario\n        double[] snowLeft = new double[N];\n        \n        // input snow in inches and temp in degrees F for each day\n        while (!StdIn.isEmpty()) {\n            // read data from standard input\n            double newSnow = StdIn.readDouble();\n            int temp = StdIn.readInt();\n            \n            // compute meltage for one day with each salt value\n            for (int i = 0; i < N; i++) {\n                snowLeft[i] = snowLeft[i] + newSnow;\n                double melt = meltage(snowLeft[i], temp, salt[i]);\n                // how much snow left after the melting?\n                snowLeft[i] = snowLeft[i] - melt;\n            }\n            printArray(snowLeft);\n        }\n    }\n}\n"
}
