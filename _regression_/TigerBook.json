{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class TigerBook { \n   /************************************************************************* \n Reference solution for Spring 2013 COS 126 Programming Exam 2: TigerBook\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Person, ST\n\n Description:  Models a collection of users (Person objects) each with\n               a unique id (String).\n\n**************************************************************************/\n   private ST<String, Person> users;  // map each id to a user\n\n   // Constructor\n   public TigerBook() {\n      users = new ST<String, Person>();\n   }\n\n   // Add a person to the list of users.\n   // We are allowed to assume this id was not registered yet.\n   public void register(String id, Person p) {\n      users.put(id, p);\n   }\n\n   // Return the person registered with this id.\n   // Throw a RuntimeException if no such person exists.\n   public Person lookup(String id) {\n\n      // Was this id String registered?\n      if (!users.contains(id))\n         throw new RuntimeException(\"User id not found\");\n\n      // return the right Person\n      return users.get(id);\n   }\n    public static void exampleClientMain(String[] args) {\n        TigerBook tb = new TigerBook(); \n\n        while (!StdIn.isEmpty()) {\n\n            String first = StdIn.readString(); // first word on line\n            \n            if (first.startsWith(\"//\")) { // is this line a comment?\n                StdIn.readLine();         // if so, skip the rest of the line\n                continue;                 // and don't try to read an action\n            }\n\n            String name = first;                // the first word is a person \n            String action = StdIn.readString(); // now, read the action\n\n            // now translate the action to method calls\n            if (action.equals(\"registers\")) {\n                Person newUser = new Person(name);\n                tb.register(name, newUser);\n            }\n            else if (action.equals(\"meets\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                user1.meet(user2);\n            }\n            else if (action.equals(\"posts\")) {\n                String message = StdIn.readLine(); // read rest of line\n                message = message.substring(1);    // get rid of space at start\n                Person user = tb.lookup(name);\n                user.post(message);\n            }\n            else if (action.equals(\"queries\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                StdOut.print(\"Are \"+name+\" and \"+name2+\" friends? \");\n                boolean isFriend = user1.knows(user2);\n                StdOut.println(isFriend);\n            }\n            else if (action.equals(\"reads\")) {\n                Person user = tb.lookup(name);\n                user.listMessages();\n            }\n            else {\n                // this case would be triggered by a line like \"person1 coughs\"\n                // but could also be caused by typos, or putting too many words\n                // on one line, or not enough words on one line, etc\n                String msg = \"ExampleClient doesn't know how to perform action\";\n                msg += \" \\\"\"+action+\"\\\"\\n Your input is misformatted, \";\n                msg += \"see the ExampleClient header comment for help\";\n                throw new RuntimeException(msg);\n            }\n        }\n    }    \n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "96": 39
        }
    ],
    "combined_with_initial": [
        false,
        "Line 38, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class TigerBook { \n/************************************************************************* \n Reference solution for Spring 2013 COS 126 Programming Exam 2: TigerBook\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Person, ST\n\n Description:  Models a collection of users (Person objects) each with\n               a unique id (String).\n\n**************************************************************************/\n    private ST<String, Person> users;  // map each id to a user\n\n    // Constructor\n    public TigerBook() {\n        users = new ST<String, Person>();\n    }\n\n    // Add a person to the list of users.\n    // We are allowed to assume this id was not registered yet.\n    public void register(String id, Person p) {\n        users.put(id, p);\n    }\n\n    // Return the person registered with this id.\n    // Throw a RuntimeException if no such person exists.\n    public Person lookup(String id) {\n\n        // Was this id String registered?\n        if (!users.contains(id))\n            throw new RuntimeException(\"User id not found\");\n\n        // return the right Person\n        return users.get(id);\n    }\n    public static void exampleClientMain(String[] args) {\n        TigerBook tb = new TigerBook(); \n\n        while (!StdIn.isEmpty()) {\n\n            String first = StdIn.readString(); // first word on line\n            \n            if (first.startsWith(\"//\")) { // is this line a comment?\n                StdIn.readLine();         // if so, skip the rest of the line\n                continue;                 // and don't try to read an action\n            }\n\n            String name = first;                // the first word is a person \n            String action = StdIn.readString(); // now, read the action\n\n            // now translate the action to method calls\n            if (action.equals(\"registers\")) {\n                Person newUser = new Person(name);\n                tb.register(name, newUser);\n            }\n            else if (action.equals(\"meets\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                user1.meet(user2);\n            }\n            else if (action.equals(\"posts\")) {\n                String message = StdIn.readLine(); // read rest of line\n                message = message.substring(1);    // get rid of space at start\n                Person user = tb.lookup(name);\n                user.post(message);\n            }\n            else if (action.equals(\"queries\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                StdOut.print(\"Are \"+name+\" and \"+name2+\" friends? \");\n                boolean isFriend = user1.knows(user2);\n                StdOut.println(isFriend);\n            }\n            else if (action.equals(\"reads\")) {\n                Person user = tb.lookup(name);\n                user.listMessages();\n            }\n            else {\n                // this case would be triggered by a line like \"person1 coughs\"\n                // but could also be caused by typos, or putting too many words\n                // on one line, or not enough words on one line, etc\n                String msg = \"ExampleClient doesn't know how to perform action\";\n                msg += \" \\\"\"+action+\"\\\"\\n Your input is misformatted, \";\n                msg += \"see the ExampleClient header comment for help\";\n                throw new RuntimeException(msg);\n            }\n        }\n    }    \n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "96": 39
        }
    ],
    "daveagp": [
        "\n   /************************************************************************* \n Reference solution for Spring 2013 COS 126 Programming Exam 2: TigerBook\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Person, ST\n\n Description:  Models a collection of users (Person objects) each with\n               a unique id (String).\n\n**************************************************************************/\n   private ST<String, Person> users;  // map each id to a user\n\n   // Constructor\n   public TigerBook() {\n      users = new ST<String, Person>();\n   }\n\n   // Add a person to the list of users.\n   // We are allowed to assume this id was not registered yet.\n   public void register(String id, Person p) {\n      users.put(id, p);\n   }\n\n   // Return the person registered with this id.\n   // Throw a RuntimeException if no such person exists.\n   public Person lookup(String id) {\n\n      // Was this id String registered?\n      if (!users.contains(id))\n         throw new RuntimeException(\"User id not found\");\n\n      // return the right Person\n      return users.get(id);\n   }\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class TigerBook { ",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "reference_snippets": [
        "\n/************************************************************************* \n Reference solution for Spring 2013 COS 126 Programming Exam 2: TigerBook\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Person, ST\n\n Description:  Models a collection of users (Person objects) each with\n               a unique id (String).\n\n**************************************************************************/\n    private ST<String, Person> users;  // map each id to a user\n\n    // Constructor\n    public TigerBook() {\n        users = new ST<String, Person>();\n    }\n\n    // Add a person to the list of users.\n    // We are allowed to assume this id was not registered yet.\n    public void register(String id, Person p) {\n        users.put(id, p);\n    }\n\n    // Return the person registered with this id.\n    // Throw a RuntimeException if no such person exists.\n    public Person lookup(String id) {\n\n        // Was this id String registered?\n        if (!users.contains(id))\n            throw new RuntimeException(\"User id not found\");\n\n        // return the right Person\n        return users.get(id);\n    }\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class TigerBook { \n/************************************************************************* \n Reference solution for Spring 2013 COS 126 Programming Exam 2: TigerBook\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Person, ST\n\n Description:  Models a collection of users (Person objects) each with\n               a unique id (String).\n\n**************************************************************************/\n    private ST<String, Person> users;  // map each id to a user\n\n    // Constructor\n    public TigerBook() {\n        users = new ST<String, Person>();\n    }\n\n    // Add a person to the list of users.\n    // We are allowed to assume this id was not registered yet.\n    public void register(String id, Person p) {\n        users.put(id, p);\n    }\n\n    // Return the person registered with this id.\n    // Throw a RuntimeException if no such person exists.\n    public Person lookup(String id) {\n\n        // Was this id String registered?\n        if (!users.contains(id))\n            throw new RuntimeException(\"User id not found\");\n\n        // return the right Person\n        return users.get(id);\n    }\n    public static void exampleClientMain(String[] args) {\n        TigerBook tb = new TigerBook(); \n\n        while (!StdIn.isEmpty()) {\n\n            String first = StdIn.readString(); // first word on line\n            \n            if (first.startsWith(\"//\")) { // is this line a comment?\n                StdIn.readLine();         // if so, skip the rest of the line\n                continue;                 // and don't try to read an action\n            }\n\n            String name = first;                // the first word is a person \n            String action = StdIn.readString(); // now, read the action\n\n            // now translate the action to method calls\n            if (action.equals(\"registers\")) {\n                Person newUser = new Person(name);\n                tb.register(name, newUser);\n            }\n            else if (action.equals(\"meets\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                user1.meet(user2);\n            }\n            else if (action.equals(\"posts\")) {\n                String message = StdIn.readLine(); // read rest of line\n                message = message.substring(1);    // get rid of space at start\n                Person user = tb.lookup(name);\n                user.post(message);\n            }\n            else if (action.equals(\"queries\")) {\n                String name2 = StdIn.readString();\n                Person user1 = tb.lookup(name);\n                Person user2 = tb.lookup(name2);\n                StdOut.print(\"Are \"+name+\" and \"+name2+\" friends? \");\n                boolean isFriend = user1.knows(user2);\n                StdOut.println(isFriend);\n            }\n            else if (action.equals(\"reads\")) {\n                Person user = tb.lookup(name);\n                user.listMessages();\n            }\n            else {\n                // this case would be triggered by a line like \"person1 coughs\"\n                // but could also be caused by typos, or putting too many words\n                // on one line, or not enough words on one line, etc\n                String msg = \"ExampleClient doesn't know how to perform action\";\n                msg += \" \\\"\"+action+\"\\\"\\n Your input is misformatted, \";\n                msg += \"see the ExampleClient header comment for help\";\n                throw new RuntimeException(msg);\n            }\n        }\n    }    \n}\n"
}
