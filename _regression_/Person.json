{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Person { \n  /*************************************************************************\n Reference solution for Spring 2013 COS 126 Programming Exam 2: Person\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Stack, Queue, StdOut\n\n Description:  Models a person, a list of messages that they can\n               read, and a list of their friends, so that when you\n               post a message, all your friends can read it too.\n\n**************************************************************************/\n   private String name;\n   private Queue<Person> friends; // Stack or Queue, doesn't matter\n   private Stack<String> wall;    // Stack, so newest is iterated first\n   \n   // Create a new Person with this name.\n   public Person(String name) {\n      this.name = name;\n      this.friends = new Queue<Person>();\n      this.wall = new Stack<String>();\n   }\n   \n   // Make these two people become friends with each other.\n   // Throw an exception if you try to meet yourself.\n   // We are allowed to assume we didn't meet this person yet.\n   public void meet(Person otherPerson) {\n      if (otherPerson == this)\n         throw new RuntimeException(\"You can't meet yourself\");\n      \n      friends.enqueue(otherPerson);      // remember this friend\n      otherPerson.friends.enqueue(this); // reciprocate\n   }\n   \n   // Are these two people friends?\n   // Throw an exception if you ask about knowing yourself.\n   public boolean knows(Person otherPerson) {\n      if (otherPerson == this)\n         throw new RuntimeException(\"You can't call knows() on yourself\");\n      \n      // Search through all my friends\n      for (Person p : friends) {\n         if (p == otherPerson)\n            return true;\n      }\n      \n      // If otherPerson was not found, I don't know them\n      return false;\n   }\n   \n   // Post a message to my list and the lists of all my friends\n   public void post(String message) {\n      wall.push(message);       // add to my own list\n      \n      for (Person p : friends)\n         p.wall.push(message); // and to each friend's\n   }\n   \n   // Print a header, then all messages this Person can read, newest first\n   public void listMessages() {\n      // header\n      StdOut.println(\"== The wall of \" + name + \" ==\");\n      \n      // Iterate through all messages and print them\n      for (String s : wall)\n         StdOut.println(s);\n   }   \n   \n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72
        }
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class Person { ",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "combined_with_initial": [
        false,
        "Line 70, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n  /*************************************************************************\n Reference solution for Spring 2013 COS 126 Programming Exam 2: Person\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Stack, Queue, StdOut\n\n Description:  Models a person, a list of messages that they can\n               read, and a list of their friends, so that when you\n               post a message, all your friends can read it too.\n\n**************************************************************************/\n   private String name;\n   private Queue<Person> friends; // Stack or Queue, doesn't matter\n   private Stack<String> wall;    // Stack, so newest is iterated first\n   \n   // Create a new Person with this name.\n   public Person(String name) {\n      this.name = name;\n      this.friends = new Queue<Person>();\n      this.wall = new Stack<String>();\n   }\n   \n   // Make these two people become friends with each other.\n   // Throw an exception if you try to meet yourself.\n   // We are allowed to assume we didn't meet this person yet.\n   public void meet(Person otherPerson) {\n      if (otherPerson == this)\n         throw new RuntimeException(\"You can't meet yourself\");\n      \n      friends.enqueue(otherPerson);      // remember this friend\n      otherPerson.friends.enqueue(this); // reciprocate\n   }\n   \n   // Are these two people friends?\n   // Throw an exception if you ask about knowing yourself.\n   public boolean knows(Person otherPerson) {\n      if (otherPerson == this)\n         throw new RuntimeException(\"You can't call knows() on yourself\");\n      \n      // Search through all my friends\n      for (Person p : friends) {\n         if (p == otherPerson)\n            return true;\n      }\n      \n      // If otherPerson was not found, I don't know them\n      return false;\n   }\n   \n   // Post a message to my list and the lists of all my friends\n   public void post(String message) {\n      wall.push(message);       // add to my own list\n      \n      for (Person p : friends)\n         p.wall.push(message); // and to each friend's\n   }\n   \n   // Print a header, then all messages this Person can read, newest first\n   public void listMessages() {\n      // header\n      StdOut.println(\"== The wall of \" + name + \" ==\");\n      \n      // Iterate through all messages and print them\n      for (String s : wall)\n         StdOut.println(s);\n   }   \n   \n"
    ],
    "reference_snippets": [
        "\n/*************************************************************************\n Reference solution for Spring 2013 COS 126 Programming Exam 2: Person\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Stack, Queue, StdOut\n\n Description:  Models a person, a list of messages that they can\n               read, and a list of their friends, so that when you\n               post a message, all your friends can read it too.\n\n**************************************************************************/\n    private String name;\n    private Queue<Person> friends; // Stack or Queue, doesn't matter\n    private Stack<String> wall;    // Stack, so newest is iterated first\n\n    // Create a new Person with this name.\n    public Person(String name) {\n        this.name = name;\n        this.friends = new Queue<Person>();\n        this.wall = new Stack<String>();\n    }\n\n    // Make these two people become friends with each other.\n    // Throw an exception if you try to meet yourself.\n    // We are allowed to assume we didn't meet this person yet.\n    public void meet(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't meet yourself\");\n\n        friends.enqueue(otherPerson);      // remember this friend\n        otherPerson.friends.enqueue(this); // reciprocate\n    }\n\n    // Are these two people friends?\n    // Throw an exception if you ask about knowing yourself.\n    public boolean knows(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't call knows() on yourself\");\n\n        // Search through all my friends\n        for (Person p : friends) {\n            if (p == otherPerson)\n                return true;\n        }\n\n        // If otherPerson was not found, I don't know them\n        return false;\n    }\n\n    // Post a message to my list and the lists of all my friends\n    public void post(String message) {\n        wall.push(message);       // add to my own list\n\n        for (Person p : friends)\n            p.wall.push(message); // and to each friend's\n    }\n\n    // Print a header, then all messages this Person can read, newest first\n    public void listMessages() {\n        // header\n        StdOut.println(\"== The wall of \" + name + \" ==\");\n\n        // Iterate through all messages and print them\n        for (String s : wall)\n            StdOut.println(s);\n    }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Person { \n/*************************************************************************\n Reference solution for Spring 2013 COS 126 Programming Exam 2: Person\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Stack, Queue, StdOut\n\n Description:  Models a person, a list of messages that they can\n               read, and a list of their friends, so that when you\n               post a message, all your friends can read it too.\n\n**************************************************************************/\n    private String name;\n    private Queue<Person> friends; // Stack or Queue, doesn't matter\n    private Stack<String> wall;    // Stack, so newest is iterated first\n\n    // Create a new Person with this name.\n    public Person(String name) {\n        this.name = name;\n        this.friends = new Queue<Person>();\n        this.wall = new Stack<String>();\n    }\n\n    // Make these two people become friends with each other.\n    // Throw an exception if you try to meet yourself.\n    // We are allowed to assume we didn't meet this person yet.\n    public void meet(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't meet yourself\");\n\n        friends.enqueue(otherPerson);      // remember this friend\n        otherPerson.friends.enqueue(this); // reciprocate\n    }\n\n    // Are these two people friends?\n    // Throw an exception if you ask about knowing yourself.\n    public boolean knows(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't call knows() on yourself\");\n\n        // Search through all my friends\n        for (Person p : friends) {\n            if (p == otherPerson)\n                return true;\n        }\n\n        // If otherPerson was not found, I don't know them\n        return false;\n    }\n\n    // Post a message to my list and the lists of all my friends\n    public void post(String message) {\n        wall.push(message);       // add to my own list\n\n        for (Person p : friends)\n            p.wall.push(message); // and to each friend's\n    }\n\n    // Print a header, then all messages this Person can read, newest first\n    public void listMessages() {\n        // header\n        StdOut.println(\"== The wall of \" + name + \" ==\");\n\n        // Iterate through all messages and print them\n        for (String s : wall)\n            StdOut.println(s);\n    }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Person { \n/*************************************************************************\n Reference solution for Spring 2013 COS 126 Programming Exam 2: Person\n\n Author:       COS 126 Staff\n Netid:        cos126\n Precepts:     lots of them\n Dependencies: Stack, Queue, StdOut\n\n Description:  Models a person, a list of messages that they can\n               read, and a list of their friends, so that when you\n               post a message, all your friends can read it too.\n\n**************************************************************************/\n    private String name;\n    private Queue<Person> friends; // Stack or Queue, doesn't matter\n    private Stack<String> wall;    // Stack, so newest is iterated first\n\n    // Create a new Person with this name.\n    public Person(String name) {\n        this.name = name;\n        this.friends = new Queue<Person>();\n        this.wall = new Stack<String>();\n    }\n\n    // Make these two people become friends with each other.\n    // Throw an exception if you try to meet yourself.\n    // We are allowed to assume we didn't meet this person yet.\n    public void meet(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't meet yourself\");\n\n        friends.enqueue(otherPerson);      // remember this friend\n        otherPerson.friends.enqueue(this); // reciprocate\n    }\n\n    // Are these two people friends?\n    // Throw an exception if you ask about knowing yourself.\n    public boolean knows(Person otherPerson) {\n        if (otherPerson == this)\n            throw new RuntimeException(\"You can't call knows() on yourself\");\n\n        // Search through all my friends\n        for (Person p : friends) {\n            if (p == otherPerson)\n                return true;\n        }\n\n        // If otherPerson was not found, I don't know them\n        return false;\n    }\n\n    // Post a message to my list and the lists of all my friends\n    public void post(String message) {\n        wall.push(message);       // add to my own list\n\n        for (Person p : friends)\n            p.wall.push(message); // and to each friend's\n    }\n\n    // Print a header, then all messages this Person can read, newest first\n    public void listMessages() {\n        // header\n        StdOut.println(\"== The wall of \" + name + \" ==\");\n\n        // Iterate through all messages and print them\n        for (String s : wall)\n            StdOut.println(s);\n    }\n}\n"
}
