{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class KnapsackBacktrack {\n   // void method, prints out value and description of best solution\n   public static void printBest(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      /****************************************************************/\n      /*** hidden code here correctly fills out canMake[][] for you ***/\n      /****************************************************************/\n   \n      canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      // find biggest weight <= capacity that can be made\n      int optWeight = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) optWeight = j;\n      StdOut.print(\"Optimal weight is \" + optWeight);\n      \n      // keep track of which items we must take in the optimal solution\n      boolean[] useItem = new boolean[numItems]; // initially all false\n      \n      // repeatedly reduce the number of items and see if we must use\n      // last item or not. update optWeight to the weight we must select\n      // from amongst the remaining items.\n      while (numItems > 0) { \n         // canMake[optWeight][numItems] is true. what caused it?\n         // it must be that either (a) canMake[optWeight][numItems-1] is true,\n         // or (b) canMake[optWeight-itemWeights[numItems-1]][numItems-1] is true.\n         // track back to whichever one of those is true.\n         if ( canMake[optWeight][numItems-1] ) { // case (a)\n            // we will *not* use item numItems-1\n            useItem[numItems-1] =  false ;\n            // optWeight does not change\n         }\n         else { // case (b)\n            // we have to use item numItems-1\n             useItem[numItems-1] = true ;\n            // reduce optWeight by that item's weight\n            optWeight -=  itemWeights[numItems-1] ;\n         }\n         // we've now reduced the bactracking to a smaller problem\n         numItems--;\n      }\n      // at the end, optWeight and numItems should be 0, and useItem is filled.\n   \n      StdOut.print(\" and optimal solution uses: \");\n      for (int i=0; i<useItem.length; i++) {\n         if (useItem[i]) StdOut.print(itemWeights[i]+\" \");\n      } \n      StdOut.println();\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      printBest(testWeights, 20); // should be 18 (7+11)\n      printBest(testWeights, 100); // should be 33 (5+7+10+11)\n      printBest(testWeights, 33); // again, 33\n      printBest(testWeights, 32); // 28 (7+10+11)\n      printBest(testWeights, 4); // 0, nothing fits\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "3": 1,
            "34": 14,
            "35": 15,
            "36": 16,
            "37": 17,
            "38": 18,
            "39": 19,
            "4": 2,
            "40": 20,
            "41": 21,
            "42": 22,
            "43": 23,
            "44": 24,
            "45": 25,
            "46": 26,
            "47": 27,
            "48": 28,
            "49": 29,
            "5": 3,
            "50": 30,
            "51": 31,
            "52": 32,
            "53": 33,
            "54": 34,
            "55": 35,
            "56": 36,
            "57": 37,
            "58": 38,
            "59": 39,
            "6": 4,
            "60": 40,
            "61": 41,
            "62": 42,
            "63": 43,
            "64": 44,
            "65": 45,
            "66": 46,
            "67": 47,
            "68": 48,
            "69": 49,
            "7": 5,
            "70": 50,
            "71": 51,
            "72": 52,
            "73": 53,
            "74": 54,
            "75": 55,
            "76": 56,
            "77": 57,
            "78": 58,
            "79": 59,
            "8": 6,
            "80": 60,
            "81": 61,
            "82": 62,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 30:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class KnapsackBacktrack {\n   // void method, prints out value and description of best solution\n   public static void printBest(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      /****************************************************************/\n      /*** hidden code here correctly fills out canMake[][] for you ***/\n      /****************************************************************/\n   \n      canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      // find biggest weight <= capacity that can be made\n      int optWeight = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) optWeight = j;\n      StdOut.print(\"Optimal weight is \" + optWeight);\n      \n      // keep track of which items we must take in the optimal solution\n      boolean[] useItem = new boolean[numItems]; // initially all false\n      \n      // repeatedly reduce the number of items and see if we must use\n      // last item or not. update optWeight to the weight we must select\n      // from amongst the remaining items.\n      while (numItems > 0) { \n         // canMake[optWeight][numItems] is true. what caused it?\n         // it must be that either (a) canMake[optWeight][numItems-1] is true,\n         // or (b) canMake[optWeight-itemWeights[numItems-1]][numItems-1] is true.\n         // track back to whichever one of those is true.\n         if ( canMake[optWeight][numItems-1] ) { // case (a)\n            // we will *not* use item numItems-1\n            useItem[numItems-1] =  false ;\n            // optWeight does not change\n         }\n         else { // case (b)\n            // we have to use item numItems-1\n             useItem[numItems-1] = true ;\n            // reduce optWeight by that item's weight\n            optWeight -=  itemWeights[numItems-1] ;\n         }\n         // we've now reduced the bactracking to a smaller problem\n         numItems--;\n      }\n      // at the end, optWeight and numItems should be 0, and useItem is filled.\n   \n      StdOut.print(\" and optimal solution uses: \");\n      for (int i=0; i<useItem.length; i++) {\n         if (useItem[i]) StdOut.print(itemWeights[i]+\" \");\n      } \n      StdOut.println();\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      printBest(testWeights, 20); // should be 18 (7+11)\n      printBest(testWeights, 100); // should be 33 (5+7+10+11)\n      printBest(testWeights, 33); // again, 33\n      printBest(testWeights, 32); // 28 (7+10+11)\n      printBest(testWeights, 4); // 0, nothing fits\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "3": 1,
            "34": 14,
            "35": 15,
            "36": 16,
            "37": 17,
            "38": 18,
            "39": 19,
            "4": 2,
            "40": 20,
            "41": 21,
            "42": 22,
            "43": 23,
            "44": 24,
            "45": 25,
            "46": 26,
            "47": 27,
            "48": 28,
            "49": 29,
            "5": 3,
            "50": 30,
            "51": 31,
            "52": 32,
            "53": 33,
            "54": 34,
            "55": 35,
            "56": 36,
            "57": 37,
            "58": 38,
            "59": 39,
            "6": 4,
            "60": 40,
            "61": 41,
            "62": 42,
            "63": 43,
            "64": 44,
            "65": 45,
            "66": 46,
            "67": 47,
            "68": 48,
            "69": 49,
            "7": 5,
            "70": 50,
            "71": 51,
            "72": 52,
            "73": 53,
            "74": 54,
            "75": 55,
            "76": 56,
            "77": 57,
            "78": 58,
            "79": 59,
            "8": 6,
            "80": 60,
            "81": 61,
            "82": 62,
            "9": 7
        }
    ],
    "daveagp": [
        " canMake[optWeight][numItems-1] ",
        " false ",
        " useItem[numItems-1] = true ",
        " itemWeights[numItems-1] "
    ],
    "initial_snippets": [
        "                                ",
        "       ",
        "                            ",
        "                         "
    ],
    "json_template": [
        "public class KnapsackBacktrack {\n   // void method, prints out value and description of best solution\n   public static void printBest(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      /****************************************************************/\n      /*** hidden code here correctly fills out canMake[][] for you ***/\n      /****************************************************************/\n   \n      // find biggest weight <= capacity that can be made\n      int optWeight = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) optWeight = j;\n      StdOut.print(\"Optimal weight is \" + optWeight);\n      \n      // keep track of which items we must take in the optimal solution\n      boolean[] useItem = new boolean[numItems]; // initially all false\n      \n      // repeatedly reduce the number of items and see if we must use\n      // last item or not. update optWeight to the weight we must select\n      // from amongst the remaining items.\n      while (numItems > 0) { \n         // canMake[optWeight][numItems] is true. what caused it?\n         // it must be that either (a) canMake[optWeight][numItems-1] is true,\n         // or (b) canMake[optWeight-itemWeights[numItems-1]][numItems-1] is true.\n         // track back to whichever one of those is true.\n         if (",
        "                                ",
        ") { // case (a)\n            // we will *not* use item numItems-1\n            useItem[numItems-1] = ",
        "       ",
        ";\n            // optWeight does not change\n         }\n         else { // case (b)\n            // we have to use item numItems-1\n            ",
        "                            ",
        ";\n            // reduce optWeight by that item's weight\n            optWeight -= ",
        "                         ",
        ";\n         }\n         // we've now reduced the bactracking to a smaller problem\n         numItems--;\n      }\n      // at the end, optWeight and numItems should be 0, and useItem is filled.\n   \n      StdOut.print(\" and optimal solution uses: \");\n      for (int i=0; i<useItem.length; i++) {\n         if (useItem[i]) StdOut.print(itemWeights[i]+\" \");\n      } \n      StdOut.println();\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      printBest(testWeights, 20); // should be 18 (7+11)\n      printBest(testWeights, 100); // should be 33 (5+7+10+11)\n      printBest(testWeights, 33); // again, 33\n      printBest(testWeights, 32); // 28 (7+10+11)\n      printBest(testWeights, 4); // 0, nothing fits\n   }\n}"
    ],
    "reference_snippets": [
        " canMake[optWeight][numItems-1] ",
        " false ",
        " useItem[numItems-1] = true ",
        " itemWeights[numItems-1] "
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class KnapsackBacktrack {\n   // void method, prints out value and description of best solution\n   public static void printBest(int[] itemWeights, int capacity) {\n      int numItems = itemWeights.length; // for convenience\n      // canMake[j][i]: can we make weight exactly j, using a subset of the\n      //                items 0, 1, ..., i-1?\n      boolean[][] canMake = new boolean[capacity+1][numItems+1];\n   \n      /****************************************************************/\n      /*** hidden code here correctly fills out canMake[][] for you ***/\n      /****************************************************************/\n   \n      canMake = new boolean[capacity+1][numItems+1];\n   \n      // if no items are allowed (i==0), the only weight we can make is 0\n      canMake[0][0] = true;\n   \n      for (int i=1; i<=numItems; i++) {\n         for (int j=0; j<=capacity; j++) {\n            // if we can get a total weight of j using a subset of the first\n            // i items, we can do the same with a subset of the first i-1,\n            // by simply not taking the ith item\n            canMake[j][i] = canMake[j][i-1];\n   \n            // if we take the ith item, to make weight j, the subset of items\n            // up to i must have weight j-itemWeights[i-1]\n            if (j >= itemWeights[i-1] && canMake[j-itemWeights[i-1]][i-1])\n               canMake[j][i] = true;\n         }\n      }\n      // find biggest weight <= capacity that can be made\n      int optWeight = 0;\n      for (int j=0; j<=capacity; j++)\n         if (canMake[j][numItems]) optWeight = j;\n      StdOut.print(\"Optimal weight is \" + optWeight);\n      \n      // keep track of which items we must take in the optimal solution\n      boolean[] useItem = new boolean[numItems]; // initially all false\n      \n      // repeatedly reduce the number of items and see if we must use\n      // last item or not. update optWeight to the weight we must select\n      // from amongst the remaining items.\n      while (numItems > 0) { \n         // canMake[optWeight][numItems] is true. what caused it?\n         // it must be that either (a) canMake[optWeight][numItems-1] is true,\n         // or (b) canMake[optWeight-itemWeights[numItems-1]][numItems-1] is true.\n         // track back to whichever one of those is true.\n         if ( canMake[optWeight][numItems-1] ) { // case (a)\n            // we will *not* use item numItems-1\n            useItem[numItems-1] =  false ;\n            // optWeight does not change\n         }\n         else { // case (b)\n            // we have to use item numItems-1\n             useItem[numItems-1] = true ;\n            // reduce optWeight by that item's weight\n            optWeight -=  itemWeights[numItems-1] ;\n         }\n         // we've now reduced the bactracking to a smaller problem\n         numItems--;\n      }\n      // at the end, optWeight and numItems should be 0, and useItem is filled.\n   \n      StdOut.print(\" and optimal solution uses: \");\n      for (int i=0; i<useItem.length; i++) {\n         if (useItem[i]) StdOut.print(itemWeights[i]+\" \");\n      } \n      StdOut.println();\n   }\n   \n   public static void main(String[] args) {\n      int[] testWeights = {5, 7, 10, 11};\n      printBest(testWeights, 20); // should be 18 (7+11)\n      printBest(testWeights, 100); // should be 33 (5+7+10+11)\n      printBest(testWeights, 33); // again, 33\n      printBest(testWeights, 32); // 28 (7+10+11)\n      printBest(testWeights, 4); // 0, nothing fits\n   }\n}\n"
}
