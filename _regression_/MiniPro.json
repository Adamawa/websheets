{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class MiniPro {\n/**************************************************************************\n     * MiniPro: Interpreter for a miniature programming language.\n     * \n     * COS 126, Princeton University, Fall 2013, Programming Midterm 2 Part 1\n     * \n     * Dependencies: ST, StdOut\n     * \n     * Compilation: javac-introcs MiniPro.java\n     * \n     * Execution:\n     * % java-introcs MiniPro\n     * false\n     * 0\n     * currently x is 13\n     * 39\n     * 13\n     * true\n     **************************************************************************/\n   private int pc;                       // the program counter\n   private String[][] program;           // the program itself\n   private ST<String, Integer> varTable; // values of all defined variables\n\n   // Create interpreter for this program. Don't execute it yet!\n   public MiniPro(String[][] program) {\n      this.program = program;\n      pc = 0; // line 0 is always the first to execute\n      varTable = new ST<String, Integer>();\n   }\n\n   // Return the current value of the variable named v. If no\n   // such variable is currently defined, throw a RuntimeException.\n   public int valueOf(String v) {\n      if (!varTable.contains(v))\n         throw new RuntimeException(\"Variable named \" + v + \" not defined\");\n      return varTable.get(v);\n   }\n\n   // Return the number of the line that will execute next.\n   public int programCounter() {\n      return pc;\n   }\n\n   // Execute the line whose number equals the value of the\n   // program counter. Then, increment the program counter.\n   public void step() {\n      String[] line = program[pc]; // current line (1d piece of 2d array)\n      String command = line[1]; \n\n      // assignment statement\n      if (command.equals(\"=\")) {\n         // look at token on right-hand side, evaluate it\n         String rhsToken = line[2];\n         int rhsValue;\n\n         if (rhsToken.matches(\"[a-z]+\"))       // it's a variable name\n            rhsValue = varTable.get(rhsToken);\n         else                                  // it's an integer\n            rhsValue = Integer.parseInt(rhsToken);\n\n         // save value in variable\n         varTable.put(line[0], rhsValue);\n      }\n\n      // println statement\n      else if (command.equals(\"println\")) {\n         // get value of desired variable, then print it\n         int value = varTable.get(line[0]);\n         StdOut.println(value);\n      }\n\n      // increment the program counter\n      pc++;\n   }\n\n   // Is the program done?\n   public boolean isDone() {\n      return pc == program.length;\n   }\n\n   public static void MPRun_main() {\n   \n      // read all input into lines; handle Windows newlines & extra space\n      String[] allLines = StdIn.readAll().trim().split(\"\\\\s*\\\\n\");\n   \n      // two-dimensional array to hold program\n      String[][] program = new String[allLines.length][];\n   \n      // break each line into tokens\n      for (int i=0; i<allLines.length; i++)\n         program[i] = allLines[i].split(\" \");\n         \n      // construct intepreter\n      MiniPro mp = new MiniPro(program);\n   \n      // execute the program\n      int steps = 0;\n      while (!mp.isDone()) {\n         mp.step();\n         steps++;\n         if (steps > 500) throw new Error(\"MPRun ran this MiniPro instance for 500 step()s, halting!\\nCheck for infinite looping behavior.\");\n      }\n   }                                                                                                                        \n}\n",
        {
            "10": 8,
            "106": 81,
            "107": 82,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 79:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class MiniPro {\n   /**************************************************************************\n     * MiniPro: Interpreter for a miniature programming language.\n     * \n     * COS 126, Princeton University, Fall 2013, Programming Midterm 2 Part 1\n     * \n     * Dependencies: ST, StdOut\n     * \n     * Compilation: javac-introcs MiniPro.java\n     * \n     * Execution:\n     * % java-introcs MiniPro\n     * false\n     * 0\n     * currently x is 13\n     * 39\n     * 13\n     * true\n     **************************************************************************/\n       private int pc;                       // the program counter\n       private String[][] program;           // the program itself\n       private ST<String, Integer> varTable; // values of all defined variables\n       \n       // Create interpreter for this program. Don't execute it yet!\n       public MiniPro(String[][] program) {\n           this.program = program;\n           pc = 0; // line 0 is always the first to execute\n           varTable = new ST<String, Integer>();\n       }\n   \n       // Return the current value of the variable named v. If no\n       // such variable is currently defined, throw a RuntimeException.\n       public int valueOf(String v) {\n           if (!varTable.contains(v))\n               throw new RuntimeException(\"Variable named \" + v + \" not defined\");\n           return varTable.get(v);\n       }\n   \n       // Return the number of the line that will execute next.\n       public int programCounter() {\n           return pc;\n       }\n   \n       // Execute the line whose number equals the value of the\n       // program counter. Then, increment the program counter.\n       public void step() {\n           String[] line = program[pc]; // current line (1d piece of 2d array)\n           String command = line[1]; \n   \n           // assignment statement\n           if (command.equals(\"=\")) {\n               // look at token on right-hand side, evaluate it\n               String rhsToken = line[2];\n               int rhsValue;\n               \n               if (rhsToken.matches(\"[a-z]+\"))       // it's a variable name\n                   rhsValue = varTable.get(rhsToken);\n               else                                  // it's an integer\n                   rhsValue = Integer.parseInt(rhsToken);\n               \n               // save value in variable\n               varTable.put(line[0], rhsValue);\n           }\n           \n           // println statement\n           else if (command.equals(\"println\")) {\n               // get value of desired variable, then print it\n               int value = varTable.get(line[0]);\n               StdOut.println(value);\n           }\n           \n           // increment the program counter\n           pc++;\n       }\n   \n       // Is the program done?\n       public boolean isDone() {\n           return pc == program.length;\n       }\n   public static void MPRun_main() {\n   \n      // read all input into lines; handle Windows newlines & extra space\n      String[] allLines = StdIn.readAll().trim().split(\"\\\\s*\\\\n\");\n   \n      // two-dimensional array to hold program\n      String[][] program = new String[allLines.length][];\n   \n      // break each line into tokens\n      for (int i=0; i<allLines.length; i++)\n         program[i] = allLines[i].split(\" \");\n         \n      // construct intepreter\n      MiniPro mp = new MiniPro(program);\n   \n      // execute the program\n      int steps = 0;\n      while (!mp.isDone()) {\n         mp.step();\n         steps++;\n         if (steps > 500) throw new Error(\"MPRun ran this MiniPro instance for 500 step()s, halting!\\nCheck for infinite looping behavior.\");\n      }\n   }                                                                                                                        \n}\n",
        {
            "10": 8,
            "105": 80,
            "106": 81,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "6": 4,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "7": 5,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "8": 6,
            "80": 78,
            "81": 79,
            "82": 80,
            "9": 7
        }
    ],
    "daveagp": [
        "\n/**************************************************************************\n     * MiniPro: Interpreter for a miniature programming language.\n     * \n     * COS 126, Princeton University, Fall 2013, Programming Midterm 2 Part 1\n     * \n     * Dependencies: ST, StdOut\n     * \n     * Compilation: javac-introcs MiniPro.java\n     * \n     * Execution:\n     * % java-introcs MiniPro\n     * false\n     * 0\n     * currently x is 13\n     * 39\n     * 13\n     * true\n     **************************************************************************/\n   private int pc;                       // the program counter\n   private String[][] program;           // the program itself\n   private ST<String, Integer> varTable; // values of all defined variables\n\n   // Create interpreter for this program. Don't execute it yet!\n   public MiniPro(String[][] program) {\n      this.program = program;\n      pc = 0; // line 0 is always the first to execute\n      varTable = new ST<String, Integer>();\n   }\n\n   // Return the current value of the variable named v. If no\n   // such variable is currently defined, throw a RuntimeException.\n   public int valueOf(String v) {\n      if (!varTable.contains(v))\n         throw new RuntimeException(\"Variable named \" + v + \" not defined\");\n      return varTable.get(v);\n   }\n\n   // Return the number of the line that will execute next.\n   public int programCounter() {\n      return pc;\n   }\n\n   // Execute the line whose number equals the value of the\n   // program counter. Then, increment the program counter.\n   public void step() {\n      String[] line = program[pc]; // current line (1d piece of 2d array)\n      String command = line[1]; \n\n      // assignment statement\n      if (command.equals(\"=\")) {\n         // look at token on right-hand side, evaluate it\n         String rhsToken = line[2];\n         int rhsValue;\n\n         if (rhsToken.matches(\"[a-z]+\"))       // it's a variable name\n            rhsValue = varTable.get(rhsToken);\n         else                                  // it's an integer\n            rhsValue = Integer.parseInt(rhsToken);\n\n         // save value in variable\n         varTable.put(line[0], rhsValue);\n      }\n\n      // println statement\n      else if (command.equals(\"println\")) {\n         // get value of desired variable, then print it\n         int value = varTable.get(line[0]);\n         StdOut.println(value);\n      }\n\n      // increment the program counter\n      pc++;\n   }\n\n   // Is the program done?\n   public boolean isDone() {\n      return pc == program.length;\n   }\n\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class MiniPro {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "reference_snippets": [
        "\n   /**************************************************************************\n     * MiniPro: Interpreter for a miniature programming language.\n     * \n     * COS 126, Princeton University, Fall 2013, Programming Midterm 2 Part 1\n     * \n     * Dependencies: ST, StdOut\n     * \n     * Compilation: javac-introcs MiniPro.java\n     * \n     * Execution:\n     * % java-introcs MiniPro\n     * false\n     * 0\n     * currently x is 13\n     * 39\n     * 13\n     * true\n     **************************************************************************/\n       private int pc;                       // the program counter\n       private String[][] program;           // the program itself\n       private ST<String, Integer> varTable; // values of all defined variables\n       \n       // Create interpreter for this program. Don't execute it yet!\n       public MiniPro(String[][] program) {\n           this.program = program;\n           pc = 0; // line 0 is always the first to execute\n           varTable = new ST<String, Integer>();\n       }\n   \n       // Return the current value of the variable named v. If no\n       // such variable is currently defined, throw a RuntimeException.\n       public int valueOf(String v) {\n           if (!varTable.contains(v))\n               throw new RuntimeException(\"Variable named \" + v + \" not defined\");\n           return varTable.get(v);\n       }\n   \n       // Return the number of the line that will execute next.\n       public int programCounter() {\n           return pc;\n       }\n   \n       // Execute the line whose number equals the value of the\n       // program counter. Then, increment the program counter.\n       public void step() {\n           String[] line = program[pc]; // current line (1d piece of 2d array)\n           String command = line[1]; \n   \n           // assignment statement\n           if (command.equals(\"=\")) {\n               // look at token on right-hand side, evaluate it\n               String rhsToken = line[2];\n               int rhsValue;\n               \n               if (rhsToken.matches(\"[a-z]+\"))       // it's a variable name\n                   rhsValue = varTable.get(rhsToken);\n               else                                  // it's an integer\n                   rhsValue = Integer.parseInt(rhsToken);\n               \n               // save value in variable\n               varTable.put(line[0], rhsValue);\n           }\n           \n           // println statement\n           else if (command.equals(\"println\")) {\n               // get value of desired variable, then print it\n               int value = varTable.get(line[0]);\n               StdOut.println(value);\n           }\n           \n           // increment the program counter\n           pc++;\n       }\n   \n       // Is the program done?\n       public boolean isDone() {\n           return pc == program.length;\n       }\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class MiniPro {\n   /**************************************************************************\n     * MiniPro: Interpreter for a miniature programming language.\n     * \n     * COS 126, Princeton University, Fall 2013, Programming Midterm 2 Part 1\n     * \n     * Dependencies: ST, StdOut\n     * \n     * Compilation: javac-introcs MiniPro.java\n     * \n     * Execution:\n     * % java-introcs MiniPro\n     * false\n     * 0\n     * currently x is 13\n     * 39\n     * 13\n     * true\n     **************************************************************************/\n       private int pc;                       // the program counter\n       private String[][] program;           // the program itself\n       private ST<String, Integer> varTable; // values of all defined variables\n       \n       // Create interpreter for this program. Don't execute it yet!\n       public MiniPro(String[][] program) {\n           this.program = program;\n           pc = 0; // line 0 is always the first to execute\n           varTable = new ST<String, Integer>();\n       }\n   \n       // Return the current value of the variable named v. If no\n       // such variable is currently defined, throw a RuntimeException.\n       public int valueOf(String v) {\n           if (!varTable.contains(v))\n               throw new RuntimeException(\"Variable named \" + v + \" not defined\");\n           return varTable.get(v);\n       }\n   \n       // Return the number of the line that will execute next.\n       public int programCounter() {\n           return pc;\n       }\n   \n       // Execute the line whose number equals the value of the\n       // program counter. Then, increment the program counter.\n       public void step() {\n           String[] line = program[pc]; // current line (1d piece of 2d array)\n           String command = line[1]; \n   \n           // assignment statement\n           if (command.equals(\"=\")) {\n               // look at token on right-hand side, evaluate it\n               String rhsToken = line[2];\n               int rhsValue;\n               \n               if (rhsToken.matches(\"[a-z]+\"))       // it's a variable name\n                   rhsValue = varTable.get(rhsToken);\n               else                                  // it's an integer\n                   rhsValue = Integer.parseInt(rhsToken);\n               \n               // save value in variable\n               varTable.put(line[0], rhsValue);\n           }\n           \n           // println statement\n           else if (command.equals(\"println\")) {\n               // get value of desired variable, then print it\n               int value = varTable.get(line[0]);\n               StdOut.println(value);\n           }\n           \n           // increment the program counter\n           pc++;\n       }\n   \n       // Is the program done?\n       public boolean isDone() {\n           return pc == program.length;\n       }\n   public static void MPRun_main() {\n   \n      // read all input into lines; handle Windows newlines & extra space\n      String[] allLines = StdIn.readAll().trim().split(\"\\\\s*\\\\n\");\n   \n      // two-dimensional array to hold program\n      String[][] program = new String[allLines.length][];\n   \n      // break each line into tokens\n      for (int i=0; i<allLines.length; i++)\n         program[i] = allLines[i].split(\" \");\n         \n      // construct intepreter\n      MiniPro mp = new MiniPro(program);\n   \n      // execute the program\n      int steps = 0;\n      while (!mp.isDone()) {\n         mp.step();\n         steps++;\n         if (steps > 500) throw new Error(\"MPRun ran this MiniPro instance for 500 step()s, halting!\\nCheck for infinite looping behavior.\");\n      }\n   }                                                                                                                        \n}\n"
}
