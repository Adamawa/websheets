{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Lambert {\n   \n   // evaluate Lambert's W function at x. Assumes x >= 0.\n   public static double W(double x) {\n      // we know that W(x) >= 0 and W(x) <= max(1, ln(x))\n      double lo = 0;\n      double hi = Math.max(1, Math.log(x));  \n   \n      // continue until search endpoints differ by 1E-8 or less\n      while ( hi-lo > 1E-8    ) {\n         // evaluate midpoint times e^midpoint\n         double mid = (hi+lo)/2;\n         double val = mid*Math.exp(mid);\n   \n         // if this value is smaller than x, search above, else search below\n         if (val < x)\n            lo = mid;\n         else\n            hi = mid;\n      }\n      return lo; // return some point in final range\n   }\n   \n   public static void main(String[] args) {\n      double x = Double.parseDouble(args[0]);\n      StdOut.println(W(x));\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 7, editable region 1:\nmust have exactly one semicolon, at the end"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Lambert {\n   \n   // evaluate Lambert's W function at x. Assumes x >= 0.\n   public static double W(double x) {\n      // we know that W(x) >= 0 and W(x) <= max(1, ln(x))\n      double lo = 0;\n      double hi = Math.max(1, Math.log(x));  \n   \n      // continue until search endpoints differ by 1E-8 or less\n      while ( hi - lo >= 1E-8 ) {\n         // evaluate midpoint times e^midpoint\n         double mid = (lo + hi) / 2;\n         double midval = mid * Math.exp(mid);\n   \n         // if this value is smaller than x, search above, else search below\n         if (midval < x)\n            lo = mid;\n         else\n            hi = mid;\n      }\n      return lo; // return some point in final range\n   }\n   \n   public static void main(String[] args) {\n      double x = Double.parseDouble(args[0]);\n      StdOut.println(W(x));\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        " double hi = Math.max(1, Math.log(x)); ",
        " hi-lo > 1E-8    ",
        "\n         double mid = (hi+lo)/2;\n         double val = mid*Math.exp(mid);\n",
        "\n         if (val < x)\n            lo = mid;\n         else\n            hi = mid;\n"
    ],
    "initial_snippets": [
        "                                       ",
        "                 ",
        "\n\n\n",
        "\n\n\n\n\n"
    ],
    "json_template": [
        "public class Lambert {\n   \n   // evaluate Lambert's W function at x. Assumes x >= 0.\n   public static double W(double x) {\n      // we know that W(x) >= 0 and W(x) <= max(1, ln(x))\n      double lo = 0;\n     ",
        "                                       ",
        " \n   \n      // continue until search endpoints differ by 1E-8 or less\n      while (",
        "                 ",
        ") {\n         // evaluate midpoint times e^midpoint",
        "\n\n\n",
        "   \n         // if this value is smaller than x, search above, else search below",
        "\n\n\n\n\n",
        "      }\n      return lo; // return some point in final range\n   }\n   \n   public static void main(String[] args) {\n      double x = Double.parseDouble(args[0]);\n      StdOut.println(W(x));\n   }\n}"
    ],
    "reference_snippets": [
        " double hi = Math.max(1, Math.log(x)); ",
        " hi - lo >= 1E-8 ",
        "\n         double mid = (lo + hi) / 2;\n         double midval = mid * Math.exp(mid);\n",
        "\n         if (midval < x)\n            lo = mid;\n         else\n            hi = mid;\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Lambert {\n   \n   // evaluate Lambert's W function at x. Assumes x >= 0.\n   public static double W(double x) {\n      // we know that W(x) >= 0 and W(x) <= max(1, ln(x))\n      double lo = 0;\n      double hi = Math.max(1, Math.log(x));  \n   \n      // continue until search endpoints differ by 1E-8 or less\n      while ( hi - lo >= 1E-8 ) {\n         // evaluate midpoint times e^midpoint\n         double mid = (lo + hi) / 2;\n         double midval = mid * Math.exp(mid);\n   \n         // if this value is smaller than x, search above, else search below\n         if (midval < x)\n            lo = mid;\n         else\n            hi = mid;\n      }\n      return lo; // return some point in final range\n   }\n   \n   public static void main(String[] args) {\n      double x = Double.parseDouble(args[0]);\n      StdOut.println(W(x));\n   }\n}\n"
}
