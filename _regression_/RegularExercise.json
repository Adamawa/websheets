{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class RegularExercise {\n\n    // regular expression for: all strings that start with G or R\n    public static String startsWithGorR = \"(G|R).*\";\n\n    // regular expression for: all strings that contain a substring \"EX\"\n    public static String containsEX =  \".*EX.*\" ;\n\n    // regular expression for: all strings that do not contain an E\n    public static String noE =  \"(G|R|X)*|ERG\" ;\n\n    // regular expression for: all strings in which every X is followed by a G\n    public static String everyXfollowedByG =  \"(G|R|E|XG)*\" ;\n\n    // regular expression for: all strings that do not end with X\n    public static String doesNotEndWithX =  \".*(G|R|E)|\"   ;\n    \n    public static void main(String[] args) {\n        StdOut.printf(\"%24s%12s%6s%18s%16s\\n\", \"startsWithGorR\", \"containsEX\",\n                      \"noE\", \"everyXfollowedByG\", \"doesNotEndWithX\");\n        for (String a : args) {\n        StdOut.printf(\"%8s%16s%12s%6s%18s%16s\\n\", a, \n                      a.matches(startsWithGorR),\n                      a.matches(containsEX),\n                      a.matches(noE),\n                      a.matches(everyXfollowedByG),\n                      a.matches(doesNotEndWithX));\n        }\n    }\n    \n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32
        }
    ],
    "initial_snippets": [
        "          ",
        "            ",
        "               ",
        "                "
    ],
    "json_template": [
        "public class RegularExercise {\n\n    // regular expression for: all strings that start with G or R\n    public static String startsWithGorR = \"(G|R).*\";\n\n    // regular expression for: all strings that contain a substring \"EX\"\n    public static String containsEX = ",
        "          ",
        ";\n\n    // regular expression for: all strings that do not contain an E\n    public static String noE = ",
        "            ",
        ";\n\n    // regular expression for: all strings in which every X is followed by a G\n    public static String everyXfollowedByG = ",
        "               ",
        ";\n\n    // regular expression for: all strings that do not end with X\n    public static String doesNotEndWithX = ",
        "                ",
        ";\n    \n    public static void main(String[] args) {\n        StdOut.printf(\"%24s%12s%6s%18s%16s\\n\", \"startsWithGorR\", \"containsEX\",\n                      \"noE\", \"everyXfollowedByG\", \"doesNotEndWithX\");\n        for (String a : args) {\n        StdOut.printf(\"%8s%16s%12s%6s%18s%16s\\n\", a, \n                      a.matches(startsWithGorR),\n                      a.matches(containsEX),\n                      a.matches(noE),\n                      a.matches(everyXfollowedByG),\n                      a.matches(doesNotEndWithX));\n        }\n    }\n    \n}"
    ],
    "combined_with_initial": [
        false,
        "Line 7:\nmust not be empty"
    ],
    "daveagp": [
        " \".*EX.*\" ",
        " \"(G|R|X)*|ERG\" ",
        " \"(G|R|E|XG)*\" ",
        " \".*(G|R|E)|\"   "
    ],
    "reference_snippets": [
        " \".*EX.*\" ",
        " \"(R|G|X)*\" ",
        " \"(XG|G|R|E)*\" ",
        " \"(.*(G|R|E))|\" "
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class RegularExercise {\n\n    // regular expression for: all strings that start with G or R\n    public static String startsWithGorR = \"(G|R).*\";\n\n    // regular expression for: all strings that contain a substring \"EX\"\n    public static String containsEX =  \".*EX.*\" ;\n\n    // regular expression for: all strings that do not contain an E\n    public static String noE =  \"(R|G|X)*\" ;\n\n    // regular expression for: all strings in which every X is followed by a G\n    public static String everyXfollowedByG =  \"(XG|G|R|E)*\" ;\n\n    // regular expression for: all strings that do not end with X\n    public static String doesNotEndWithX =  \"(.*(G|R|E))|\" ;\n    \n    public static void main(String[] args) {\n        StdOut.printf(\"%24s%12s%6s%18s%16s\\n\", \"startsWithGorR\", \"containsEX\",\n                      \"noE\", \"everyXfollowedByG\", \"doesNotEndWithX\");\n        for (String a : args) {\n        StdOut.printf(\"%8s%16s%12s%6s%18s%16s\\n\", a, \n                      a.matches(startsWithGorR),\n                      a.matches(containsEX),\n                      a.matches(noE),\n                      a.matches(everyXfollowedByG),\n                      a.matches(doesNotEndWithX));\n        }\n    }\n    \n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class RegularExercise {\n\n    // regular expression for: all strings that start with G or R\n    public static String startsWithGorR = \"(G|R).*\";\n\n    // regular expression for: all strings that contain a substring \"EX\"\n    public static String containsEX =  \".*EX.*\" ;\n\n    // regular expression for: all strings that do not contain an E\n    public static String noE =  \"(R|G|X)*\" ;\n\n    // regular expression for: all strings in which every X is followed by a G\n    public static String everyXfollowedByG =  \"(XG|G|R|E)*\" ;\n\n    // regular expression for: all strings that do not end with X\n    public static String doesNotEndWithX =  \"(.*(G|R|E))|\" ;\n    \n    public static void main(String[] args) {\n        StdOut.printf(\"%24s%12s%6s%18s%16s\\n\", \"startsWithGorR\", \"containsEX\",\n                      \"noE\", \"everyXfollowedByG\", \"doesNotEndWithX\");\n        for (String a : args) {\n        StdOut.printf(\"%8s%16s%12s%6s%18s%16s\\n\", a, \n                      a.matches(startsWithGorR),\n                      a.matches(containsEX),\n                      a.matches(noE),\n                      a.matches(everyXfollowedByG),\n                      a.matches(doesNotEndWithX));\n        }\n    }\n    \n}\n"
}
