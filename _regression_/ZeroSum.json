{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class ZeroSum {\n   public static boolean testAllCombs(int runningSum, int[] nums, int seenSoFar) {\n      if (seenSoFar == nums.length)\n         return runningSum==0;\n      \n      return testAllCombs(runningSum+nums[seenSoFar], nums, seenSoFar+1)||\n         testAllCombs(runningSum-nums[seenSoFar], nums, seenSoFar+1);\n\n\n\n\n\n\n\n\n\n\n\n\n   }\n   \n   public static void main(String[] args) {\n      int[] testArr = {1434, 3243, 343, 5, 293, 3408, 123, 487, 93, 12, 2984, 29};\n      // should print true because\n      // -1434+3243-343-5-293-3408-123-487-93-12+2984-29 = 0\n      StdOut.println(testAllCombs(0, testArr, 0)); // true\n      testArr = new int[] {1, 2};\n      // no way to make zero\n      StdOut.println(testAllCombs(0, testArr, 0)); // false\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 19:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class ZeroSum {\n   public static boolean testAllCombs(int runningSum, int[] nums, int seenSoFar) {\n      // we've given a sign to all numbers\n      if (seenSoFar == nums.length) {\n         if (runningSum == 0) \n            return true;  // hit the runningSum\n         else\n            return false; // missed the runningSum\n      }\n   \n      // try both possibilities, propagating any hit\n      if (testAllCombs(runningSum + nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      if (testAllCombs(runningSum - nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      // neither recursive call found a solution\n      return false;\n   }\n   \n   public static void main(String[] args) {\n      int[] testArr = {1434, 3243, 343, 5, 293, 3408, 123, 487, 93, 12, 2984, 29};\n      // should print true because\n      // -1434+3243-343-5-293-3408-123-487-93-12+2984-29 = 0\n      StdOut.println(testAllCombs(0, testArr, 0)); // true\n      testArr = new int[] {1, 2};\n      // no way to make zero\n      StdOut.println(testAllCombs(0, testArr, 0)); // false\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n      if (seenSoFar == nums.length)\n         return runningSum==0;\n      \n      return testAllCombs(runningSum+nums[seenSoFar], nums, seenSoFar+1)||\n         testAllCombs(runningSum-nums[seenSoFar], nums, seenSoFar+1);\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class ZeroSum {\n   public static boolean testAllCombs(int runningSum, int[] nums, int seenSoFar) {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   }\n   \n   public static void main(String[] args) {\n      int[] testArr = {1434, 3243, 343, 5, 293, 3408, 123, 487, 93, 12, 2984, 29};\n      // should print true because\n      // -1434+3243-343-5-293-3408-123-487-93-12+2984-29 = 0\n      StdOut.println(testAllCombs(0, testArr, 0)); // true\n      testArr = new int[] {1, 2};\n      // no way to make zero\n      StdOut.println(testAllCombs(0, testArr, 0)); // false\n   }\n}"
    ],
    "reference_snippets": [
        "\n      // we've given a sign to all numbers\n      if (seenSoFar == nums.length) {\n         if (runningSum == 0) \n            return true;  // hit the runningSum\n         else\n            return false; // missed the runningSum\n      }\n   \n      // try both possibilities, propagating any hit\n      if (testAllCombs(runningSum + nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      if (testAllCombs(runningSum - nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      // neither recursive call found a solution\n      return false;\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class ZeroSum {\n   public static boolean testAllCombs(int runningSum, int[] nums, int seenSoFar) {\n      // we've given a sign to all numbers\n      if (seenSoFar == nums.length) {\n         if (runningSum == 0) \n            return true;  // hit the runningSum\n         else\n            return false; // missed the runningSum\n      }\n   \n      // try both possibilities, propagating any hit\n      if (testAllCombs(runningSum + nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      if (testAllCombs(runningSum - nums[seenSoFar], nums, seenSoFar+1))\n         return true;\n   \n      // neither recursive call found a solution\n      return false;\n   }\n   \n   public static void main(String[] args) {\n      int[] testArr = {1434, 3243, 343, 5, 293, 3408, 123, 487, 93, 12, 2984, 29};\n      // should print true because\n      // -1434+3243-343-5-293-3408-123-487-93-12+2984-29 = 0\n      StdOut.println(testAllCombs(0, testArr, 0)); // true\n      testArr = new int[] {1, 2};\n      // no way to make zero\n      StdOut.println(testAllCombs(0, testArr, 0)); // false\n   }\n}\n"
}
