{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class MonkeyChain {\n    // structure of items in list\n    class Node {\n        // each node knows \"next\" node\n        Node next;\n        // and stores a value\n        String name;\n        // constructor for nodes\n        Node(String initialName) {\n            name = initialName;\n        }\n    }\n    \n    // beginning of the list, initially empty\n    private Node first = null;\n    \n    // a demo to create a length-3 list\n    public void threeKongs() {\n        first = new Node(\"DK Sr.\");\n        first.next = new Node(\"DK\");\n        first.next.next = new Node(\"DK Jr.\");\n    }\n\n    public void printAll() {\n        // one possible approach: use a while loop\n        Node current = first; // start at beginning\n\n        // if current isn't past the last node,\n        while ( current != null ) {\n            // println current node's name; then repeat loop w/next one\n           System.out.println(current.name);\n           current = current.next;\n        }\n    }\n\n    public static void main(String[] args) {\n       MonkeyChain mc = new MonkeyChain();\n       mc.threeKongs();\n       mc.printAll();\n    }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 29, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class MonkeyChain {\n    // structure of items in list\n    class Node {\n        // each node knows \"next\" node\n        Node next;\n        // and stores a value\n        String name;\n        // constructor for nodes\n        Node(String initialName) {\n            name = initialName;\n        }\n    }\n    \n    // beginning of the list, initially empty\n    private Node first = null;\n    \n    // a demo to create a length-3 list\n    public void threeKongs() {\n        first = new Node(\"DK Sr.\");\n        first.next = new Node(\"DK\");\n        first.next.next = new Node(\"DK Jr.\");\n    }\n\n    public void printAll() {\n        // one possible approach: use a while loop\n        Node current = first; // start at beginning\n\n        // if current isn't past the last node,\n        while ( current != null ) {\n            // println current node's name; then repeat loop w/next one\n            System.out.println(current.name);\n            current = current.next;\n        }\n    }\n\n    public static void main(String[] args) {\n       MonkeyChain mc = new MonkeyChain();\n       mc.threeKongs();\n       mc.printAll();\n    }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        " current != null ",
        "\n           System.out.println(current.name);\n           current = current.next;\n"
    ],
    "initial_snippets": [
        "                 ",
        "\n\n\n"
    ],
    "json_template": [
        "public class MonkeyChain {\n    // structure of items in list\n    class Node {\n        // each node knows \"next\" node\n        Node next;\n        // and stores a value\n        String name;\n        // constructor for nodes\n        Node(String initialName) {\n            name = initialName;\n        }\n    }\n    \n    // beginning of the list, initially empty\n    private Node first = null;\n    \n    // a demo to create a length-3 list\n    public void threeKongs() {\n        first = new Node(\"DK Sr.\");\n        first.next = new Node(\"DK\");\n        first.next.next = new Node(\"DK Jr.\");\n    }\n\n    public void printAll() {\n        // one possible approach: use a while loop\n        Node current = first; // start at beginning\n\n        // if current isn't past the last node,\n        while (",
        "                 ",
        ") {\n            // println current node's name; then repeat loop w/next one",
        "\n\n\n",
        "        }\n    }\n\n    public static void main(String[] args) {\n       MonkeyChain mc = new MonkeyChain();\n       mc.threeKongs();\n       mc.printAll();\n    }\n}"
    ],
    "reference_snippets": [
        " current != null ",
        "\n            System.out.println(current.name);\n            current = current.next;\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class MonkeyChain {\n    // structure of items in list\n    class Node {\n        // each node knows \"next\" node\n        Node next;\n        // and stores a value\n        String name;\n        // constructor for nodes\n        Node(String initialName) {\n            name = initialName;\n        }\n    }\n    \n    // beginning of the list, initially empty\n    private Node first = null;\n    \n    // a demo to create a length-3 list\n    public void threeKongs() {\n        first = new Node(\"DK Sr.\");\n        first.next = new Node(\"DK\");\n        first.next.next = new Node(\"DK Jr.\");\n    }\n\n    public void printAll() {\n        // one possible approach: use a while loop\n        Node current = first; // start at beginning\n\n        // if current isn't past the last node,\n        while ( current != null ) {\n            // println current node's name; then repeat loop w/next one\n            System.out.println(current.name);\n            current = current.next;\n        }\n    }\n\n    public static void main(String[] args) {\n       MonkeyChain mc = new MonkeyChain();\n       mc.threeKongs();\n       mc.printAll();\n    }\n}\n"
}
