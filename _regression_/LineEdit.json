{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class LineEdit {\n   // instance variables\n   String state;\n   Stack<String> oldStates = new Stack<String>();\n   \n   // create a new LineEdit with given initial text\n   public LineEdit(String text) {\n      state = text;\n   }\n   \n   // get the current state of the editor\n   public String toString() {\n      return state;\n   }\n   \n   // add the given text at the end of the line\n   public void append(String text) {\n      oldStates.push(state);\n      state += text;\n   }\n   \n   // replace all occurrences of \"from\" with \"to\"\n   public void replaceEach(String from, String to) {\n      oldStates.push(state);\n      state = state.replace(from, to);\n   }\n   \n   // undo the latest append/replaceEach operation that hasn't already been undone\n   public void undo() {\n      if (!oldStates.isEmpty())\n         state = oldStates.pop();\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      LineEdit line = new LineEdit(\"datatype\");\n      System.out.println(line.toString());\n      line.replaceEach(\"t\", \"\");\n      System.out.println(line.toString());\n      line.append(\"st\");\n      System.out.println(line.toString());\n      line.undo();\n      System.out.println(line.toString());\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 4:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class LineEdit {\n   // instance variables\n   String state;                                   // current state\n   Stack<String> oldStates = new Stack<String>();  // previous states for undo\n   \n   // create a new LineEdit with given initial text\n   public LineEdit(String text) {\n      state = text;\n   }\n   \n   // get the current state of the editor\n   public String toString() {\n      return state;\n   }\n   \n   // add the given text at the end of the line\n   public void append(String text) {\n      oldStates.push(state);\n      state = state + text;\n   }\n   \n   // replace all occurrences of \"from\" with \"to\"\n   public void replaceEach(String from, String to) {\n      oldStates.push(state);\n      state = state.replace(from, to);\n   }\n   \n   // undo the latest append/replaceEach operation that hasn't already been undone\n   public void undo() {\n      if (!oldStates.isEmpty())  // avoid crashing when there's nothing to undo\n         state = oldStates.pop();\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      LineEdit line = new LineEdit(\"datatype\");\n      System.out.println(line.toString());\n      line.replaceEach(\"t\", \"\");\n      System.out.println(line.toString());\n      line.append(\"st\");\n      System.out.println(line.toString());\n      line.undo();\n      System.out.println(line.toString());\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n   String state;\n   Stack<String> oldStates = new Stack<String>();\n",
        "\n      state = text;\n",
        "\n      return state;\n",
        "\n      oldStates.push(state);\n      state += text;\n",
        "\n      oldStates.push(state);\n      state = state.replace(from, to);\n",
        "\n      if (!oldStates.isEmpty())\n         state = oldStates.pop();\n"
    ],
    "initial_snippets": [
        "\n\n\n",
        "\n\n",
        "\n\n",
        "\n\n\n",
        "\n\n\n",
        "\n\n\n"
    ],
    "json_template": [
        "public class LineEdit {\n   // instance variables",
        "\n\n\n",
        "   \n   // create a new LineEdit with given initial text\n   public LineEdit(String text) {",
        "\n\n",
        "   }\n   \n   // get the current state of the editor\n   public String toString() {",
        "\n\n",
        "   }\n   \n   // add the given text at the end of the line\n   public void append(String text) {",
        "\n\n\n",
        "   }\n   \n   // replace all occurrences of \"from\" with \"to\"\n   public void replaceEach(String from, String to) {",
        "\n\n\n",
        "   }\n   \n   // undo the latest append/replaceEach operation that hasn't already been undone\n   public void undo() {",
        "\n\n\n",
        "   }\n   \n   // test client\n   public static void main(String[] args) {\n      LineEdit line = new LineEdit(\"datatype\");\n      System.out.println(line.toString());\n      line.replaceEach(\"t\", \"\");\n      System.out.println(line.toString());\n      line.append(\"st\");\n      System.out.println(line.toString());\n      line.undo();\n      System.out.println(line.toString());\n   }\n}"
    ],
    "reference_snippets": [
        "\n   String state;                                   // current state\n   Stack<String> oldStates = new Stack<String>();  // previous states for undo\n",
        "\n      state = text;\n",
        "\n      return state;\n",
        "\n      oldStates.push(state);\n      state = state + text;\n",
        "\n      oldStates.push(state);\n      state = state.replace(from, to);\n",
        "\n      if (!oldStates.isEmpty())  // avoid crashing when there's nothing to undo\n         state = oldStates.pop();\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class LineEdit {\n   // instance variables\n   String state;                                   // current state\n   Stack<String> oldStates = new Stack<String>();  // previous states for undo\n   \n   // create a new LineEdit with given initial text\n   public LineEdit(String text) {\n      state = text;\n   }\n   \n   // get the current state of the editor\n   public String toString() {\n      return state;\n   }\n   \n   // add the given text at the end of the line\n   public void append(String text) {\n      oldStates.push(state);\n      state = state + text;\n   }\n   \n   // replace all occurrences of \"from\" with \"to\"\n   public void replaceEach(String from, String to) {\n      oldStates.push(state);\n      state = state.replace(from, to);\n   }\n   \n   // undo the latest append/replaceEach operation that hasn't already been undone\n   public void undo() {\n      if (!oldStates.isEmpty())  // avoid crashing when there's nothing to undo\n         state = oldStates.pop();\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      LineEdit line = new LineEdit(\"datatype\");\n      System.out.println(line.toString());\n      line.replaceEach(\"t\", \"\");\n      System.out.println(line.toString());\n      line.append(\"st\");\n      System.out.println(line.toString());\n      line.undo();\n      System.out.println(line.toString());\n   }\n}\n"
}
