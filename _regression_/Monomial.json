{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Monomial {\n   // private instance variables\n   double a;\n   int b;\n   \n   // public methods (API)\n   public Monomial(double coeff, int exp) {\n      // constructor, create a new monomial a*x^b\n      a = coeff;\n      b = exp;\n   }\n   \n   public double evaluate(double x) {\n      return a*Math.pow(x, b);\n   }\n\n    public String  toString() {\n      // use the rounding to 3 decimals indicated below\n      return String.format(\"%.3f\",  a ) +  \"*x^\" + b ;\n   }\n   \n   // test main: print out a table of several monomials' values, evaluated for\n   // different values of x specified as command-line arguments\n   public static void main(String[] args) {\n      Monomial negativeX = new Monomial(-1.0, 1);\n      Monomial squaredX = new Monomial(1.0, 2);\n      Monomial half = new Monomial(0.5, 0);\n      Monomial scaledRecip = new Monomial(-12.6, -1);\n      \n      // print out a header row. toString() is called implicitly!\n      StdOut.printf(\"%12s%12s%12s%12s%14s\\n\", \n                    \"x\", negativeX, squaredX, half, scaledRecip); \n   \n      for (int i=0; i<args.length; i++) {\n         // print out a row of the table\n         double x = Double.parseDouble(args[i]);\n         StdOut.printf(\"%12.3f%12.3f%12.3f%12.3f%14.3f\\n\", \n                        x, \n                        negativeX.evaluate(x), \n                        squaredX.evaluate(x),\n                        half.evaluate(x),\n                        scaledRecip.evaluate(x)); \n      }\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_initial": [
        false,
        "Line 5, editable region 1:\nmust not be empty"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Monomial {\n   // private instance variables\n   private double a;\n   private int b;\n   \n   // public methods (API)\n   // constructor, create a new monomial a*x^b\n   public Monomial(double coeff, int exp) {\n      a = coeff;\n      b = exp;\n   }\n   \n   // return the value of a*x^b\n   public double evaluate(double x) {\n      return a*Math.pow(x, b);\n   }\n   \n   // return the String \"a*x^b\"\n    public String  toString() {\n      // use the rounding to 3 decimals indicated below\n      return String.format(\"%.3f\",  a ) +  \"*x^\" + b ;\n   }\n   \n   // test main: print out a table of several monomials' values, evaluated for\n   // different values of x specified as command-line arguments\n   public static void main(String[] args) {\n      Monomial negativeX = new Monomial(-1.0, 1);\n      Monomial squaredX = new Monomial(1.0, 2);\n      Monomial half = new Monomial(0.5, 0);\n      Monomial scaledRecip = new Monomial(-12.6, -1);\n      \n      // print out a header row. toString() is called implicitly!\n      StdOut.printf(\"%12s%12s%12s%12s%14s\\n\", \n                    \"x\", negativeX, squaredX, half, scaledRecip); \n   \n      for (int i=0; i<args.length; i++) {\n         // print out a row of the table\n         double x = Double.parseDouble(args[i]);\n         StdOut.printf(\"%12.3f%12.3f%12.3f%12.3f%14.3f\\n\", \n                        x, \n                        negativeX.evaluate(x), \n                        squaredX.evaluate(x),\n                        half.evaluate(x),\n                        scaledRecip.evaluate(x)); \n      }\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n   double a;\n   int b;\n",
        "\n   public Monomial(double coeff, int exp) {\n      // constructor, create a new monomial a*x^b\n      a = coeff;\n      b = exp;\n   }\n   \n   public double evaluate(double x) {\n      return a*Math.pow(x, b);\n   }\n\n",
        " public String ",
        " a ",
        " \"*x^\" + b "
    ],
    "initial_snippets": [
        "\n\n\n",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "               ",
        "   ",
        "           "
    ],
    "json_template": [
        "public class Monomial {\n   // private instance variables",
        "\n\n\n",
        "   \n   // public methods (API)",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   ",
        "               ",
        " toString() {\n      // use the rounding to 3 decimals indicated below\n      return String.format(\"%.3f\", ",
        "   ",
        ") + ",
        "           ",
        ";\n   }\n   \n   // test main: print out a table of several monomials' values, evaluated for\n   // different values of x specified as command-line arguments\n   public static void main(String[] args) {\n      Monomial negativeX = new Monomial(-1.0, 1);\n      Monomial squaredX = new Monomial(1.0, 2);\n      Monomial half = new Monomial(0.5, 0);\n      Monomial scaledRecip = new Monomial(-12.6, -1);\n      \n      // print out a header row. toString() is called implicitly!\n      StdOut.printf(\"%12s%12s%12s%12s%14s\\n\", \n                    \"x\", negativeX, squaredX, half, scaledRecip); \n   \n      for (int i=0; i<args.length; i++) {\n         // print out a row of the table\n         double x = Double.parseDouble(args[i]);\n         StdOut.printf(\"%12.3f%12.3f%12.3f%12.3f%14.3f\\n\", \n                        x, \n                        negativeX.evaluate(x), \n                        squaredX.evaluate(x),\n                        half.evaluate(x),\n                        scaledRecip.evaluate(x)); \n      }\n   }\n}"
    ],
    "reference_snippets": [
        "\n   private double a;\n   private int b;\n",
        "\n   // constructor, create a new monomial a*x^b\n   public Monomial(double coeff, int exp) {\n      a = coeff;\n      b = exp;\n   }\n   \n   // return the value of a*x^b\n   public double evaluate(double x) {\n      return a*Math.pow(x, b);\n   }\n   \n   // return the String \"a*x^b\"\n",
        " public String ",
        " a ",
        " \"*x^\" + b "
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Monomial {\n   // private instance variables\n   private double a;\n   private int b;\n   \n   // public methods (API)\n   // constructor, create a new monomial a*x^b\n   public Monomial(double coeff, int exp) {\n      a = coeff;\n      b = exp;\n   }\n   \n   // return the value of a*x^b\n   public double evaluate(double x) {\n      return a*Math.pow(x, b);\n   }\n   \n   // return the String \"a*x^b\"\n    public String  toString() {\n      // use the rounding to 3 decimals indicated below\n      return String.format(\"%.3f\",  a ) +  \"*x^\" + b ;\n   }\n   \n   // test main: print out a table of several monomials' values, evaluated for\n   // different values of x specified as command-line arguments\n   public static void main(String[] args) {\n      Monomial negativeX = new Monomial(-1.0, 1);\n      Monomial squaredX = new Monomial(1.0, 2);\n      Monomial half = new Monomial(0.5, 0);\n      Monomial scaledRecip = new Monomial(-12.6, -1);\n      \n      // print out a header row. toString() is called implicitly!\n      StdOut.printf(\"%12s%12s%12s%12s%14s\\n\", \n                    \"x\", negativeX, squaredX, half, scaledRecip); \n   \n      for (int i=0; i<args.length; i++) {\n         // print out a row of the table\n         double x = Double.parseDouble(args[i]);\n         StdOut.printf(\"%12.3f%12.3f%12.3f%12.3f%14.3f\\n\", \n                        x, \n                        negativeX.evaluate(x), \n                        squaredX.evaluate(x),\n                        half.evaluate(x),\n                        scaledRecip.evaluate(x)); \n      }\n   }\n}\n"
}
