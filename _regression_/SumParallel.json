{
    "combined_with_daveagp": [
        false,
        "Line 24, editable region 1:\nmust not be empty"
    ],
    "combined_with_initial": [
        true,
        "package combined.initial;\nimport stdlibpack.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.locks.*;\npublic class SumParallel {\n\n   // utility function\n   static void nap(int limit_ms) {\n      try {Thread.sleep((int)(limit_ms*Math.random()));} \n      catch (InterruptedException ie) \n       {System.out.println(\"!\");} \n   }\n    \n   static int total;\n\n   ; // more variables? \n\n   // a class that adds a number to total\n   static class AdderRunnable implements Runnable {\n      int increment;\n      AdderRunnable(int increment) {this.increment = increment;}\n      public void run() {\n;// maybe do something here?\n         nap(10); // random delay up to 10ms\n;// maybe do something here?\n         {\n            // increase total by increment\n            int oldTotal = total;\n            nap(2); // random delay up to 2ms\n            total = oldTotal + increment;\n         }\n;// maybe do something here?\n      }\n   };        \n\n   public static void main(String[] args) {\n      total = 0;        \n\n      int n = Integer.parseInt(args[0]);\n        \n      // keep track of all the things we execute\n      // & impose limit b/c using many threads at makes memory run out\n      ExecutorService pool = Executors.newFixedThreadPool(23);\n  \n      for (int i=1; i<=n; i++)\n         pool.execute(new AdderRunnable(i));\n\n      pool.shutdown();               // ask to shut down\n      System.out.println(total);\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.locks.*;\npublic class SumParallel {\n\n   // utility function\n   static void nap(int limit_ms) {\n      try {Thread.sleep((int)(limit_ms*Math.random()));} \n      catch (InterruptedException ie) \n       {System.out.println(\"!\");} \n   }\n    \n   static int total;\n\n      static Lock lock = new ReentrantLock();\n\n   // a class that adds a number to total\n   static class AdderRunnable implements Runnable {\n      int increment;\n      AdderRunnable(int increment) {this.increment = increment;}\n      public void run() {\n         // do nothing here\n         nap(10); // random delay up to 10ms\n         lock.lock();\n         {\n            // increase total by increment\n            int oldTotal = total;\n            nap(2); // random delay up to 2ms\n            total = oldTotal + increment;\n         }\n         lock.unlock();\n      }\n   };        \n\n   public static void main(String[] args) {\n      total = 0;        \n\n      int n = Integer.parseInt(args[0]);\n        \n      // keep track of all the things we execute\n      // & impose limit b/c using many threads at makes memory run out\n      ExecutorService pool = Executors.newFixedThreadPool(23);\n  \n      for (int i=1; i<=n; i++)\n         pool.execute(new AdderRunnable(i));\n\n      pool.shutdown();               // ask to shut down\n      while (!pool.isTerminated()) \n         Thread.yield();             // wait until shutdown complete\n      System.out.println(total);\n   }\n}\n",
        {
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "3": 1,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "4": 2,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "5": 3,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7
        }
    ],
    "daveagp": [
        "\n   static Lock lock = new ReentrantLock();\n",
        "\n          lock.lock() ;// maybe do something here?\n",
        "\n         \n",
        "\n         lock.unlock();\n",
        "\n      pool.shutdown();               // ask to shut down\n      while (!pool.isTerminated());\n"
    ],
    "initial_snippets": [
        "\n   ; // more variables? \n",
        "\n;// maybe do something here?\n",
        "\n;// maybe do something here?\n",
        "\n;// maybe do something here?\n",
        "\n      pool.shutdown();               // ask to shut down\n"
    ],
    "json_template": [
        "import java.util.concurrent.*;\nimport java.util.concurrent.locks.*;\npublic class SumParallel {\n\n   // utility function\n   static void nap(int limit_ms) {\n      try {Thread.sleep((int)(limit_ms*Math.random()));} \n      catch (InterruptedException ie) \n       {System.out.println(\"!\");} \n   }\n    \n   static int total;\n",
        "\n   ; // more variables? \n",
        "\n   // a class that adds a number to total\n   static class AdderRunnable implements Runnable {\n      int increment;\n      AdderRunnable(int increment) {this.increment = increment;}\n      public void run() {",
        "\n;// maybe do something here?\n",
        "         nap(10); // random delay up to 10ms",
        "\n;// maybe do something here?\n",
        "         {\n            // increase total by increment\n            int oldTotal = total;\n            nap(2); // random delay up to 2ms\n            total = oldTotal + increment;\n         }",
        "\n;// maybe do something here?\n",
        "      }\n   };        \n\n   public static void main(String[] args) {\n      total = 0;        \n\n      int n = Integer.parseInt(args[0]);\n        \n      // keep track of all the things we execute\n      // & impose limit b/c using many threads at makes memory run out\n      ExecutorService pool = Executors.newFixedThreadPool(23);\n  \n      for (int i=1; i<=n; i++)\n         pool.execute(new AdderRunnable(i));\n",
        "\n      pool.shutdown();               // ask to shut down\n",
        "      System.out.println(total);\n   }\n}"
    ],
    "reference_snippets": [
        "\n      static Lock lock = new ReentrantLock();\n",
        "\n         // do nothing here\n",
        "\n         lock.lock();\n",
        "\n         lock.unlock();\n",
        "\n      pool.shutdown();               // ask to shut down\n      while (!pool.isTerminated()) \n         Thread.yield();             // wait until shutdown complete\n"
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.locks.*;\npublic class SumParallel {\n\n   // utility function\n   static void nap(int limit_ms) {\n      try {Thread.sleep((int)(limit_ms*Math.random()));} \n      catch (InterruptedException ie) \n       {System.out.println(\"!\");} \n   }\n    \n   static int total;\n\n      static Lock lock = new ReentrantLock();\n\n   // a class that adds a number to total\n   static class AdderRunnable implements Runnable {\n      int increment;\n      AdderRunnable(int increment) {this.increment = increment;}\n      public void run() {\n         // do nothing here\n         nap(10); // random delay up to 10ms\n         lock.lock();\n         {\n            // increase total by increment\n            int oldTotal = total;\n            nap(2); // random delay up to 2ms\n            total = oldTotal + increment;\n         }\n         lock.unlock();\n      }\n   };        \n\n   public static void main(String[] args) {\n      total = 0;        \n\n      int n = Integer.parseInt(args[0]);\n        \n      // keep track of all the things we execute\n      // & impose limit b/c using many threads at makes memory run out\n      ExecutorService pool = Executors.newFixedThreadPool(23);\n  \n      for (int i=1; i<=n; i++)\n         pool.execute(new AdderRunnable(i));\n\n      pool.shutdown();               // ask to shut down\n      while (!pool.isTerminated()) \n         Thread.yield();             // wait until shutdown complete\n      System.out.println(total);\n   }\n}\n"
}
