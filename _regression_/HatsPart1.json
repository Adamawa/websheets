{
    "combined_with_daveagp": [
        false,
        "Line 60, editable region 1:\nmust not be empty"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class HatsPart1 {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "combined_with_initial": [
        false,
        "Line 60, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "reference_snippets": [
        "\n   /*********************************************************************** \n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list size and permutations of that size.\n   Determine if each is a \"derangement\". \n   Print out the first derangement if it exists.\n   Print out the number of derangements.\n   \n   Requires StdIn and StdOut\n   ***********************************************************************/\n   \n       // print the first derangement with the given format\n       private static void printD(int[] r) {\n           StdOut.print(\"First derangement:\");\n           for (int i = 0; i < r.length; i++)\n               StdOut.print(\" \"+r[i]);\n           StdOut.println();\n       }\n       \n       // return true if r holds a derangement, false otherwise\n       public static boolean isD(int[] r) {\n           for (int i = 0; i < r.length; i++) {\n               if (r[i] == i+1) //i+1 to account for Java 0-based arrays\n                   return false;\n           }\n           return true;\n       }\n   \n       public static void main(String[] args) {\n           // the # of items in permutation\n           int N = StdIn.readInt(); \n   \n           // space to hold permutation\n           int[] arr = new int[N]; \n   \n           // how many derangements have we seen?\n           int count = 0;          \n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++)\n                   arr[i] = StdIn.readInt();\n   \n               // if arr is a derangement, count i\n               // and print it if it's the first.\n               if (isD(arr)) { \n                   if (count == 0) \n                       printD(arr); \n                   count++; \n               }\n           }\n   \n           // print the count with the given format\n           StdOut.println(\"Number of derangements: \" + count);\n       }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class HatsPart1 {\n   /*********************************************************************** \n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list size and permutations of that size.\n   Determine if each is a \"derangement\". \n   Print out the first derangement if it exists.\n   Print out the number of derangements.\n   \n   Requires StdIn and StdOut\n   ***********************************************************************/\n   \n       // print the first derangement with the given format\n       private static void printD(int[] r) {\n           StdOut.print(\"First derangement:\");\n           for (int i = 0; i < r.length; i++)\n               StdOut.print(\" \"+r[i]);\n           StdOut.println();\n       }\n       \n       // return true if r holds a derangement, false otherwise\n       public static boolean isD(int[] r) {\n           for (int i = 0; i < r.length; i++) {\n               if (r[i] == i+1) //i+1 to account for Java 0-based arrays\n                   return false;\n           }\n           return true;\n       }\n   \n       public static void main(String[] args) {\n           // the # of items in permutation\n           int N = StdIn.readInt(); \n   \n           // space to hold permutation\n           int[] arr = new int[N]; \n   \n           // how many derangements have we seen?\n           int count = 0;          \n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++)\n                   arr[i] = StdIn.readInt();\n   \n               // if arr is a derangement, count i\n               // and print it if it's the first.\n               if (isD(arr)) { \n                   if (count == 0) \n                       printD(arr); \n                   count++; \n               }\n           }\n   \n           // print the count with the given format\n           StdOut.println(\"Number of derangements: \" + count);\n       }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class HatsPart1 {\n   /*********************************************************************** \n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list size and permutations of that size.\n   Determine if each is a \"derangement\". \n   Print out the first derangement if it exists.\n   Print out the number of derangements.\n   \n   Requires StdIn and StdOut\n   ***********************************************************************/\n   \n       // print the first derangement with the given format\n       private static void printD(int[] r) {\n           StdOut.print(\"First derangement:\");\n           for (int i = 0; i < r.length; i++)\n               StdOut.print(\" \"+r[i]);\n           StdOut.println();\n       }\n       \n       // return true if r holds a derangement, false otherwise\n       public static boolean isD(int[] r) {\n           for (int i = 0; i < r.length; i++) {\n               if (r[i] == i+1) //i+1 to account for Java 0-based arrays\n                   return false;\n           }\n           return true;\n       }\n   \n       public static void main(String[] args) {\n           // the # of items in permutation\n           int N = StdIn.readInt(); \n   \n           // space to hold permutation\n           int[] arr = new int[N]; \n   \n           // how many derangements have we seen?\n           int count = 0;          \n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++)\n                   arr[i] = StdIn.readInt();\n   \n               // if arr is a derangement, count i\n               // and print it if it's the first.\n               if (isD(arr)) { \n                   if (count == 0) \n                       printD(arr); \n                   count++; \n               }\n           }\n   \n           // print the count with the given format\n           StdOut.println(\"Number of derangements: \" + count);\n       }\n}\n"
}
