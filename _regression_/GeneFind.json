{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class GeneFind {\n   public static String findGene(String dna) {\n      String START_CODON = \"ATG\";\n      String END_CODON = \"TAG\";\n      String pattern = \"ATG((...)+?)TAG\";\n      java.util.regex.Matcher m = java.util.regex.Pattern.compile(pattern)\n         .matcher(dna);\n      if (!m.find()) return \"no gene\";\n      return m.group(1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28
        }
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class GeneFind {\n   public static String findGene(String dna) {\n      String START_CODON = \"ATG\";\n      String END_CODON = \"TAG\";",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   }\n}"
    ],
    "combined_with_initial": [
        false,
        "Line 26, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n      String pattern = \"ATG((...)+?)TAG\";\n      java.util.regex.Matcher m = java.util.regex.Pattern.compile(pattern)\n         .matcher(dna);\n      if (!m.find()) return \"no gene\";\n      return m.group(1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "reference_snippets": [
        "\n      // what's the rightmost position so far where we found a start codon?\n      int latestStartIndex = -1;\n      while (true) {\n         // find the next start codon\n         latestStartIndex = dna.indexOf(START_CODON, latestStartIndex+1);\n   \n         // -1 is used to indicate no match by String.indexOf()\n         if (latestStartIndex == -1)\n            return \"no gene\"; // we didn't find a match\n   \n         // where is the next matching end?\n         int endIndex = dna.indexOf(END_CODON, latestStartIndex+6);\n         // keep going if length is not a multiple of 3\n         while ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 != 0)) {\n            endIndex = dna.indexOf(END_CODON, endIndex+1);\n         }\n         \n         // we're done if length is a multiple of 3\n         if ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 == 0))\n            return dna.substring(latestStartIndex+3, endIndex);\n      }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class GeneFind {\n   public static String findGene(String dna) {\n      String START_CODON = \"ATG\";\n      String END_CODON = \"TAG\";\n      // what's the rightmost position so far where we found a start codon?\n      int latestStartIndex = -1;\n      while (true) {\n         // find the next start codon\n         latestStartIndex = dna.indexOf(START_CODON, latestStartIndex+1);\n   \n         // -1 is used to indicate no match by String.indexOf()\n         if (latestStartIndex == -1)\n            return \"no gene\"; // we didn't find a match\n   \n         // where is the next matching end?\n         int endIndex = dna.indexOf(END_CODON, latestStartIndex+6);\n         // keep going if length is not a multiple of 3\n         while ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 != 0)) {\n            endIndex = dna.indexOf(END_CODON, endIndex+1);\n         }\n         \n         // we're done if length is a multiple of 3\n         if ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 == 0))\n            return dna.substring(latestStartIndex+3, endIndex);\n      }\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class GeneFind {\n   public static String findGene(String dna) {\n      String START_CODON = \"ATG\";\n      String END_CODON = \"TAG\";\n      // what's the rightmost position so far where we found a start codon?\n      int latestStartIndex = -1;\n      while (true) {\n         // find the next start codon\n         latestStartIndex = dna.indexOf(START_CODON, latestStartIndex+1);\n   \n         // -1 is used to indicate no match by String.indexOf()\n         if (latestStartIndex == -1)\n            return \"no gene\"; // we didn't find a match\n   \n         // where is the next matching end?\n         int endIndex = dna.indexOf(END_CODON, latestStartIndex+6);\n         // keep going if length is not a multiple of 3\n         while ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 != 0)) {\n            endIndex = dna.indexOf(END_CODON, endIndex+1);\n         }\n         \n         // we're done if length is a multiple of 3\n         if ((endIndex != -1) && ((endIndex - latestStartIndex) % 3 == 0))\n            return dna.substring(latestStartIndex+3, endIndex);\n      }\n   }\n}\n"
}
