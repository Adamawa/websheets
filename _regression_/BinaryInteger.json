{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class BinaryInteger {\n   private final int N;      // number of bits\n   private final String s;   // bit string\n\n   // create a binary integer from a string of 0s and 1s\n   public BinaryInteger(String s) {\n      if (!s.matches(\"[01]*\")) {\n         throw new RuntimeException(\"Illegal argument to BinaryInteger()\");\n      }\n      this.s = s;\n      this.N = s.length();\n   }\n\n   // length of this binary integer\n   public int length() {\n      return N;\n   }\n\n   // number of leading zeros in this binary integer\n   public int leadingZeros() {\n      int count = 0;\n      for (int i = N-1; i >= 0; i--) {\n         if (!ith(i)) count++;\n         else break;\n      }\n      return count;\n   }\n\n   // is this binary integer strictly greater than that binary integer?\n   public boolean isGreaterThan(BinaryInteger that) {\n      int n1 = this.length() - this.leadingZeros();\n      int n2 = that.length() - that.leadingZeros();\n      if (n1 > n2) return true;\n      if (n1 < n2) return false;\n      for (int i = n1 - 1; i >= 0; i--) {\n         if (this.ith(i) && !that.ith(i)) return true;\n         if (that.ith(i) && !this.ith(i)) return false;\n      }\n      return false;   // equal\n   }\n\n   // return the ith least significant bit as a boolean\n   private boolean ith(int i) {\n      if      (s.charAt(N - i - 1) == '0') return false;\n      else if (s.charAt(N - i - 1) == '1') return true;\n         else throw new RuntimeException(\"Inconsisent state\");\n   }\n\n   // return the bitwise xor of this binary integer and that binary integer\n   public BinaryInteger xor(BinaryInteger that) {\n      if (this.N != that.N) throw new RuntimeException(\"Size mismatch\");\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i) ^ that.ith(i)) answer = \"1\" + answer;\n         else                           answer = \"0\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return the bitwise not of this binary integer\n   public BinaryInteger not() {\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i)) answer = \"0\" + answer;\n         else             answer = \"1\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return string representation of this binary integer\n   public String toString() {\n      return s;\n   }\n\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76
        }
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class BinaryInteger {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "combined_with_initial": [
        false,
        "Line 74, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n   private final int N;      // number of bits\n   private final String s;   // bit string\n\n   // create a binary integer from a string of 0s and 1s\n   public BinaryInteger(String s) {\n      if (!s.matches(\"[01]*\")) {\n         throw new RuntimeException(\"Illegal argument to BinaryInteger()\");\n      }\n      this.s = s;\n      this.N = s.length();\n   }\n\n   // length of this binary integer\n   public int length() {\n      return N;\n   }\n\n   // number of leading zeros in this binary integer\n   public int leadingZeros() {\n      int count = 0;\n      for (int i = N-1; i >= 0; i--) {\n         if (!ith(i)) count++;\n         else break;\n      }\n      return count;\n   }\n\n   // is this binary integer strictly greater than that binary integer?\n   public boolean isGreaterThan(BinaryInteger that) {\n      int n1 = this.length() - this.leadingZeros();\n      int n2 = that.length() - that.leadingZeros();\n      if (n1 > n2) return true;\n      if (n1 < n2) return false;\n      for (int i = n1 - 1; i >= 0; i--) {\n         if (this.ith(i) && !that.ith(i)) return true;\n         if (that.ith(i) && !this.ith(i)) return false;\n      }\n      return false;   // equal\n   }\n\n   // return the ith least significant bit as a boolean\n   private boolean ith(int i) {\n      if      (s.charAt(N - i - 1) == '0') return false;\n      else if (s.charAt(N - i - 1) == '1') return true;\n         else throw new RuntimeException(\"Inconsisent state\");\n   }\n\n   // return the bitwise xor of this binary integer and that binary integer\n   public BinaryInteger xor(BinaryInteger that) {\n      if (this.N != that.N) throw new RuntimeException(\"Size mismatch\");\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i) ^ that.ith(i)) answer = \"1\" + answer;\n         else                           answer = \"0\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return the bitwise not of this binary integer\n   public BinaryInteger not() {\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i)) answer = \"0\" + answer;\n         else             answer = \"1\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return string representation of this binary integer\n   public String toString() {\n      return s;\n   }\n\n"
    ],
    "reference_snippets": [
        "\n   private final int N;      // number of bits\n   private final String s;   // bit string\n\n   // create a binary integer from a string of 0s and 1s\n   public BinaryInteger(String s) {\n      if (!s.matches(\"[01]*\")) {\n         throw new RuntimeException(\"Illegal argument to BinaryInteger()\");\n      }\n      this.s = s;\n      this.N = s.length();\n   }\n\n   // length of this binary integer\n   public int length() {\n      return N;\n   }\n\n   // number of leading zeros in this binary integer\n   public int leadingZeros() {\n      int count = 0;\n      for (int i = N-1; i >= 0; i--) {\n         if (!ith(i)) count++;\n         else break;\n      }\n      return count;\n   }\n\n   // is this binary integer strictly greater than that binary integer?\n   public boolean isGreaterThan(BinaryInteger that) {\n      int n1 = this.length() - this.leadingZeros();\n      int n2 = that.length() - that.leadingZeros();\n      if (n1 > n2) return true;\n      if (n1 < n2) return false;\n      for (int i = n1 - 1; i >= 0; i--) {\n         if (this.ith(i) && !that.ith(i)) return true;\n         if (that.ith(i) && !this.ith(i)) return false;\n      }\n      return false;   // equal\n   }\n\n   // return the ith least significant bit as a boolean\n   private boolean ith(int i) {\n      if      (s.charAt(N - i - 1) == '0') return false;\n      else if (s.charAt(N - i - 1) == '1') return true;\n      else throw new RuntimeException(\"Inconsisent state\");\n   }\n\n   // return the bitwise xor of this binary integer and that binary integer\n   public BinaryInteger xor(BinaryInteger that) {\n      if (this.N != that.N) throw new RuntimeException(\"Size mismatch\");\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i) ^ that.ith(i)) answer = \"1\" + answer;\n         else                           answer = \"0\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return the bitwise not of this binary integer\n   public BinaryInteger not() {\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i)) answer = \"0\" + answer;\n         else             answer = \"1\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return string representation of this binary integer\n   public String toString() {\n       return s;\n   }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class BinaryInteger {\n   private final int N;      // number of bits\n   private final String s;   // bit string\n\n   // create a binary integer from a string of 0s and 1s\n   public BinaryInteger(String s) {\n      if (!s.matches(\"[01]*\")) {\n         throw new RuntimeException(\"Illegal argument to BinaryInteger()\");\n      }\n      this.s = s;\n      this.N = s.length();\n   }\n\n   // length of this binary integer\n   public int length() {\n      return N;\n   }\n\n   // number of leading zeros in this binary integer\n   public int leadingZeros() {\n      int count = 0;\n      for (int i = N-1; i >= 0; i--) {\n         if (!ith(i)) count++;\n         else break;\n      }\n      return count;\n   }\n\n   // is this binary integer strictly greater than that binary integer?\n   public boolean isGreaterThan(BinaryInteger that) {\n      int n1 = this.length() - this.leadingZeros();\n      int n2 = that.length() - that.leadingZeros();\n      if (n1 > n2) return true;\n      if (n1 < n2) return false;\n      for (int i = n1 - 1; i >= 0; i--) {\n         if (this.ith(i) && !that.ith(i)) return true;\n         if (that.ith(i) && !this.ith(i)) return false;\n      }\n      return false;   // equal\n   }\n\n   // return the ith least significant bit as a boolean\n   private boolean ith(int i) {\n      if      (s.charAt(N - i - 1) == '0') return false;\n      else if (s.charAt(N - i - 1) == '1') return true;\n      else throw new RuntimeException(\"Inconsisent state\");\n   }\n\n   // return the bitwise xor of this binary integer and that binary integer\n   public BinaryInteger xor(BinaryInteger that) {\n      if (this.N != that.N) throw new RuntimeException(\"Size mismatch\");\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i) ^ that.ith(i)) answer = \"1\" + answer;\n         else                           answer = \"0\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return the bitwise not of this binary integer\n   public BinaryInteger not() {\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i)) answer = \"0\" + answer;\n         else             answer = \"1\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return string representation of this binary integer\n   public String toString() {\n       return s;\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class BinaryInteger {\n   private final int N;      // number of bits\n   private final String s;   // bit string\n\n   // create a binary integer from a string of 0s and 1s\n   public BinaryInteger(String s) {\n      if (!s.matches(\"[01]*\")) {\n         throw new RuntimeException(\"Illegal argument to BinaryInteger()\");\n      }\n      this.s = s;\n      this.N = s.length();\n   }\n\n   // length of this binary integer\n   public int length() {\n      return N;\n   }\n\n   // number of leading zeros in this binary integer\n   public int leadingZeros() {\n      int count = 0;\n      for (int i = N-1; i >= 0; i--) {\n         if (!ith(i)) count++;\n         else break;\n      }\n      return count;\n   }\n\n   // is this binary integer strictly greater than that binary integer?\n   public boolean isGreaterThan(BinaryInteger that) {\n      int n1 = this.length() - this.leadingZeros();\n      int n2 = that.length() - that.leadingZeros();\n      if (n1 > n2) return true;\n      if (n1 < n2) return false;\n      for (int i = n1 - 1; i >= 0; i--) {\n         if (this.ith(i) && !that.ith(i)) return true;\n         if (that.ith(i) && !this.ith(i)) return false;\n      }\n      return false;   // equal\n   }\n\n   // return the ith least significant bit as a boolean\n   private boolean ith(int i) {\n      if      (s.charAt(N - i - 1) == '0') return false;\n      else if (s.charAt(N - i - 1) == '1') return true;\n      else throw new RuntimeException(\"Inconsisent state\");\n   }\n\n   // return the bitwise xor of this binary integer and that binary integer\n   public BinaryInteger xor(BinaryInteger that) {\n      if (this.N != that.N) throw new RuntimeException(\"Size mismatch\");\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i) ^ that.ith(i)) answer = \"1\" + answer;\n         else                           answer = \"0\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return the bitwise not of this binary integer\n   public BinaryInteger not() {\n      String answer = \"\";\n      for (int i = 0; i < N; i++) {\n         if (this.ith(i)) answer = \"0\" + answer;\n         else             answer = \"1\" + answer;\n      }\n      return new BinaryInteger(answer);\n   }\n\n   // return string representation of this binary integer\n   public String toString() {\n       return s;\n   }\n}\n"
}
