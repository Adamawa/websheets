{
    "combined_with_daveagp": [
        false,
        "Line 66, editable region 1:\nmust not be empty"
    ],
    "initial_snippets": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class HatsPart2 {",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "}"
    ],
    "combined_with_initial": [
        false,
        "Line 66, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "reference_snippets": [
        "\n   /***********************************************************************\n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list side and permutations of that size.\n   Determine the max cycle length of each permutation.\n   Compute and print the average max cycle length.\n   \n   Requires StdIn, StdOut\n   ***************************************************************************/\n   \n       // determine longest cycle to get own hat back\n       public static int maxCycleLength(int[] arr) {\n           int N = arr.length;\n           int max = 0;       // max cycle length\n           int cycle;         // current cycle length\n           \n           // for each person\n           for (int i = 0; i < N; i++) {\n               int j = i;\n               cycle = 1; // minimal cycle has 1 person \n   \n               // while person j doesn't have person i's hat\n               while (arr[j] != i+1) {\n                   j = arr[j] - 1;  // new person j to look for\n                   cycle++;\n               }\n                           \n               if (max < cycle) max = cycle;  // new longest cycle\n           }\n   \n           // return longest cycle length\n           return max;\n       }\n       \n       public static void main(String[] args) {\n           // the # of items in the permutation\n           int N = StdIn.readInt();\n    \n           // space to hold permutation\n           int[] arr = new int[N];\n   \n           // running sum for max cycle lengths\n           int sum = 0;\n   \n           // how many derangements have we seen?\n           int count = 0;\n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++) {\n                   arr[i] = StdIn.readInt();\n               }\n   \n               // count it and find its max cycle length\n               count++;\n               sum += maxCycleLength(arr);\n           }\n           \n           // compute and print average with the given format\n           StdOut.println(\"Average max cycle length: \" + (double) sum / count);\n       }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class HatsPart2 {\n   /***********************************************************************\n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list side and permutations of that size.\n   Determine the max cycle length of each permutation.\n   Compute and print the average max cycle length.\n   \n   Requires StdIn, StdOut\n   ***************************************************************************/\n   \n       // determine longest cycle to get own hat back\n       public static int maxCycleLength(int[] arr) {\n           int N = arr.length;\n           int max = 0;       // max cycle length\n           int cycle;         // current cycle length\n           \n           // for each person\n           for (int i = 0; i < N; i++) {\n               int j = i;\n               cycle = 1; // minimal cycle has 1 person \n   \n               // while person j doesn't have person i's hat\n               while (arr[j] != i+1) {\n                   j = arr[j] - 1;  // new person j to look for\n                   cycle++;\n               }\n                           \n               if (max < cycle) max = cycle;  // new longest cycle\n           }\n   \n           // return longest cycle length\n           return max;\n       }\n       \n       public static void main(String[] args) {\n           // the # of items in the permutation\n           int N = StdIn.readInt();\n    \n           // space to hold permutation\n           int[] arr = new int[N];\n   \n           // running sum for max cycle lengths\n           int sum = 0;\n   \n           // how many derangements have we seen?\n           int count = 0;\n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++) {\n                   arr[i] = StdIn.readInt();\n               }\n   \n               // count it and find its max cycle length\n               count++;\n               sum += maxCycleLength(arr);\n           }\n           \n           // compute and print average with the given format\n           StdOut.println(\"Average max cycle length: \" + (double) sum / count);\n       }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class HatsPart2 {\n   /***********************************************************************\n   Christopher Moretti\n   cmoretti\n   P01A/P06\n   \n   Read in list side and permutations of that size.\n   Determine the max cycle length of each permutation.\n   Compute and print the average max cycle length.\n   \n   Requires StdIn, StdOut\n   ***************************************************************************/\n   \n       // determine longest cycle to get own hat back\n       public static int maxCycleLength(int[] arr) {\n           int N = arr.length;\n           int max = 0;       // max cycle length\n           int cycle;         // current cycle length\n           \n           // for each person\n           for (int i = 0; i < N; i++) {\n               int j = i;\n               cycle = 1; // minimal cycle has 1 person \n   \n               // while person j doesn't have person i's hat\n               while (arr[j] != i+1) {\n                   j = arr[j] - 1;  // new person j to look for\n                   cycle++;\n               }\n                           \n               if (max < cycle) max = cycle;  // new longest cycle\n           }\n   \n           // return longest cycle length\n           return max;\n       }\n       \n       public static void main(String[] args) {\n           // the # of items in the permutation\n           int N = StdIn.readInt();\n    \n           // space to hold permutation\n           int[] arr = new int[N];\n   \n           // running sum for max cycle lengths\n           int sum = 0;\n   \n           // how many derangements have we seen?\n           int count = 0;\n           \n           // Read until there are no more permutations left on StdIn.\n           while (!StdIn.isEmpty()) {\n               // fill array\n               for (int i = 0; i < N; i++) {\n                   arr[i] = StdIn.readInt();\n               }\n   \n               // count it and find its max cycle length\n               count++;\n               sum += maxCycleLength(arr);\n           }\n           \n           // compute and print average with the given format\n           StdOut.println(\"Average max cycle length: \" + (double) sum / count);\n       }\n}\n"
}
