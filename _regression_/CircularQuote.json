{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class CircularQuote {\n\n   // the first card in the circular linked list\n   private Card start;\n\n   // helper linked-list data type\n   private class Card {\n      private String word;\n      private Card next;\n\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // constructor - create an empty quote\n   public CircularQuote() {\n      start = null;  // no card intitially\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n       Card newCard =  new Card(w);  \n\n       // degenerate case for empty quote, w is the first word\n       if ( start == null ) {\n          start = newCard;  // save the card with the new word\n          start.next = start; // make it circular\n       } \n\n       // otherwise, traverse list until card points to last word\n       else {\n          // find the current last word\n          Card card = start;\n          do {\n             card = card.next;  \n          } while ( card.next != start );\n\n          // insert new word\n          newCard.next = start; \n          card.next = newCard;\n       } \n   }\n   \n   // string representation of the entire quote\n   public String toString(){\n      String result = \"\";\n      if (start == null) // special case\n         return result;\n\n      Card card = start;\n      do {\n         result = result + card.word + \" \"; // build string\n         card = card.next; // traverse list\n      } while (card != start);\n      return result;\n\n      // note! using a plain while loop would normally require separate\n      // logic for the 1-node and the (>1)-node case\n   }\n\n   // number of words in the quote\n   public int count() {\n      if (start == null) return 0;\n      \n      int result = 0;\n      Card c = start;\n      \n      do {\n         c = c.next;\n         result++;\n      }\n      while (c != start);\n   \n      return result;\n   }\n\n    // the kth word in the quote (where k = 1 is the first word)\n    public String circularGetKth(int k) {\n       Card card = start;\n       for (int j = 1; j < k; j++) {\n          card = card.next;\n       }\n       return card.word;\n    }\n\n   // test client\n   public static void main(String[] args) { \n      CircularQuote q = new CircularQuote();\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"A\");\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"rose\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Second word: \" + q.circularGetKth(2)); // rose\n\n      q.addWord(\"is\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Tenth word: \" + q.circularGetKth(10)); // A\n\n      q.addWord(\"a\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Seventh word: \" + q.circularGetKth(7)); // is\n\n      q.addWord(\"rose.\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"First word: \" + q.circularGetKth(1)); // A\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "104": 102,
            "105": 103,
            "106": 104,
            "107": 105,
            "108": 106,
            "109": 107,
            "110": 108,
            "111": 109,
            "112": 110,
            "113": 111,
            "114": 112,
            "115": 113
        }
    ],
    "initial_snippets": [
        "               ",
        "              ",
        "               ",
        "                  ",
        "                   ",
        "                    ",
        "\n\n\n",
        "\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class CircularQuote {\n\n   // the first card in the circular linked list\n   private Card start;\n\n   // helper linked-list data type\n   private class Card {\n      private String word;\n      private Card next;\n\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // constructor - create an empty quote\n   public CircularQuote() {\n     ",
        "               ",
        " // no card intitially\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n       Card newCard = ",
        "              ",
        " \n\n       // degenerate case for empty quote, w is the first word\n       if (",
        "               ",
        ") {\n         ",
        "                  ",
        " // save the card with the new word\n          start.next = start; // make it circular\n       } \n\n       // otherwise, traverse list until card points to last word\n       else {\n          // find the current last word\n          Card card = start;\n          do {\n            ",
        "                   ",
        " \n          } while (",
        "                    ",
        ");\n\n          // insert new word",
        "\n\n\n",
        "       } \n   }\n   \n   // string representation of the entire quote\n   public String toString(){\n      String result = \"\";\n      if (start == null) // special case\n         return result;\n\n      Card card = start;\n      do {\n         result = result + card.word + \" \"; // build string\n         card = card.next; // traverse list\n      } while (card != start);\n      return result;\n\n      // note! using a plain while loop would normally require separate\n      // logic for the 1-node and the (>1)-node case\n   }\n\n   // number of words in the quote\n   public int count() {",
        "\n\n\n\n\n\n\n\n\n\n\n",
        "   }\n\n    // the kth word in the quote (where k = 1 is the first word)\n    public String circularGetKth(int k) {\n       Card card = start;\n       for (int j = 1; j < k; j++) {\n          card = card.next;\n       }\n       return card.word;\n    }\n\n   // test client\n   public static void main(String[] args) { \n      CircularQuote q = new CircularQuote();\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"A\");\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"rose\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Second word: \" + q.circularGetKth(2)); // rose\n\n      q.addWord(\"is\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Tenth word: \" + q.circularGetKth(10)); // A\n\n      q.addWord(\"a\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Seventh word: \" + q.circularGetKth(7)); // is\n\n      q.addWord(\"rose.\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"First word: \" + q.circularGetKth(1)); // A\n   }\n}"
    ],
    "combined_with_initial": [
        false,
        "Line 19:\nmust have exactly one semicolon, at the end"
    ],
    "daveagp": [
        " start = null; ",
        " new Card(w); ",
        " start == null ",
        " start = newCard; ",
        " card = card.next; ",
        " card.next != start ",
        "\n          newCard.next = start; \n          card.next = newCard;\n",
        "\n      if (start == null) return 0;\n      \n      int result = 0;\n      Card c = start;\n      \n      do {\n         c = c.next;\n         result++;\n      }\n      while (c != start);\n   \n      return result;\n"
    ],
    "reference_snippets": [
        " start = null; ",
        " new Card(w); ",
        " start == null ",
        " start = newCard; ",
        " card = card.next; ",
        " card.next != start ",
        "\n          newCard.next = start;\n          card.next = newCard;\n",
        "\n      // empty quote\n      if (start == null) return 0;\n\n      Card card = start;\n      int total = 0;\n      do {\n         total++;\n         card = card.next;\n      } while (card != start);\n      return total;\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class CircularQuote {\n\n   // the first card in the circular linked list\n   private Card start;\n\n   // helper linked-list data type\n   private class Card {\n      private String word;\n      private Card next;\n\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // constructor - create an empty quote\n   public CircularQuote() {\n      start = null;  // no card intitially\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n       Card newCard =  new Card(w);  \n\n       // degenerate case for empty quote, w is the first word\n       if ( start == null ) {\n          start = newCard;  // save the card with the new word\n          start.next = start; // make it circular\n       } \n\n       // otherwise, traverse list until card points to last word\n       else {\n          // find the current last word\n          Card card = start;\n          do {\n             card = card.next;  \n          } while ( card.next != start );\n\n          // insert new word\n          newCard.next = start;\n          card.next = newCard;\n       } \n   }\n   \n   // string representation of the entire quote\n   public String toString(){\n      String result = \"\";\n      if (start == null) // special case\n         return result;\n\n      Card card = start;\n      do {\n         result = result + card.word + \" \"; // build string\n         card = card.next; // traverse list\n      } while (card != start);\n      return result;\n\n      // note! using a plain while loop would normally require separate\n      // logic for the 1-node and the (>1)-node case\n   }\n\n   // number of words in the quote\n   public int count() {\n      // empty quote\n      if (start == null) return 0;\n\n      Card card = start;\n      int total = 0;\n      do {\n         total++;\n         card = card.next;\n      } while (card != start);\n      return total;\n   }\n\n    // the kth word in the quote (where k = 1 is the first word)\n    public String circularGetKth(int k) {\n       Card card = start;\n       for (int j = 1; j < k; j++) {\n          card = card.next;\n       }\n       return card.word;\n    }\n\n   // test client\n   public static void main(String[] args) { \n      CircularQuote q = new CircularQuote();\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"A\");\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"rose\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Second word: \" + q.circularGetKth(2)); // rose\n\n      q.addWord(\"is\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Tenth word: \" + q.circularGetKth(10)); // A\n\n      q.addWord(\"a\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Seventh word: \" + q.circularGetKth(7)); // is\n\n      q.addWord(\"rose.\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"First word: \" + q.circularGetKth(1)); // A\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52,
            "55": 53,
            "56": 54,
            "57": 55,
            "58": 56,
            "59": 57,
            "60": 58,
            "61": 59,
            "62": 60,
            "63": 61,
            "64": 62,
            "65": 63,
            "66": 64,
            "67": 65,
            "68": 66,
            "69": 67,
            "70": 68,
            "71": 69,
            "72": 70,
            "73": 71,
            "74": 72,
            "75": 73,
            "76": 74,
            "77": 75,
            "78": 76,
            "79": 77,
            "80": 78,
            "81": 79,
            "82": 80,
            "83": 81,
            "84": 82,
            "85": 83,
            "86": 84,
            "87": 85,
            "88": 86,
            "89": 87,
            "90": 88,
            "91": 89,
            "92": 90,
            "93": 91,
            "94": 92,
            "95": 93,
            "96": 94,
            "97": 95,
            "98": 96,
            "99": 97,
            "100": 98,
            "101": 99,
            "102": 100,
            "103": 101,
            "104": 102,
            "105": 103,
            "106": 104,
            "107": 105,
            "108": 106,
            "109": 107,
            "110": 108,
            "111": 109,
            "112": 110,
            "113": 111
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class CircularQuote {\n\n   // the first card in the circular linked list\n   private Card start;\n\n   // helper linked-list data type\n   private class Card {\n      private String word;\n      private Card next;\n\n      private Card(String word) {\n         this.word = word;\n         this.next = null;\n      }\n   }\n   \n   // constructor - create an empty quote\n   public CircularQuote() {\n      start = null;  // no card intitially\n   }\n   \n   // add the word w to the end of the quote\n   public void addWord(String w) {\n       Card newCard =  new Card(w);  \n\n       // degenerate case for empty quote, w is the first word\n       if ( start == null ) {\n          start = newCard;  // save the card with the new word\n          start.next = start; // make it circular\n       } \n\n       // otherwise, traverse list until card points to last word\n       else {\n          // find the current last word\n          Card card = start;\n          do {\n             card = card.next;  \n          } while ( card.next != start );\n\n          // insert new word\n          newCard.next = start;\n          card.next = newCard;\n       } \n   }\n   \n   // string representation of the entire quote\n   public String toString(){\n      String result = \"\";\n      if (start == null) // special case\n         return result;\n\n      Card card = start;\n      do {\n         result = result + card.word + \" \"; // build string\n         card = card.next; // traverse list\n      } while (card != start);\n      return result;\n\n      // note! using a plain while loop would normally require separate\n      // logic for the 1-node and the (>1)-node case\n   }\n\n   // number of words in the quote\n   public int count() {\n      // empty quote\n      if (start == null) return 0;\n\n      Card card = start;\n      int total = 0;\n      do {\n         total++;\n         card = card.next;\n      } while (card != start);\n      return total;\n   }\n\n    // the kth word in the quote (where k = 1 is the first word)\n    public String circularGetKth(int k) {\n       Card card = start;\n       for (int j = 1; j < k; j++) {\n          card = card.next;\n       }\n       return card.word;\n    }\n\n   // test client\n   public static void main(String[] args) { \n      CircularQuote q = new CircularQuote();\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"A\");\n      StdOut.println(q.count() + \": \" + q);\n\n      q.addWord(\"rose\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Second word: \" + q.circularGetKth(2)); // rose\n\n      q.addWord(\"is\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Tenth word: \" + q.circularGetKth(10)); // A\n\n      q.addWord(\"a\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"Seventh word: \" + q.circularGetKth(7)); // is\n\n      q.addWord(\"rose.\");\n      StdOut.println(q.count() + \": \" + q);\n      StdOut.println(\"First word: \" + q.circularGetKth(1)); // A\n   }\n}\n"
}
