{
    "combined_with_daveagp": [
        true,
        "package combined.daveagp;\nimport stdlibpack.*;\npublic class Interval {\n   // instance variables\n   double lo, hi;\n\n   // constructor\n   public Interval(double lo, double hi) {\n      this.lo = lo;\n      this.hi = hi;\n      if (lo > hi) throw new RuntimeException();\n   }\n\n\n\n   // text representation\n   public String toString() {\n      // if you want, use String.format(\"%.6e\", ...);\n      return  (\"[\"+lo+\", \"+hi+\"]\");\n   }\n   // other instance methods\n   public boolean contains(double x) {\n      return x>=lo && x<=hi;\n   }\n   \n   public boolean intersects(Interval other) {\n      return !(lo>other.hi || hi<other.lo);\n   }\n\n   public boolean subsetOf(Interval other) {\n      return lo>=other.lo && hi<=other.hi;\n   }\n\n\n\n\n\n   // use \"this\" to just reuse previous logic\n   public boolean supersetOf(Interval other) {\n      return other.subsetOf(this);\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      // counting years BCE to avoid negative signs\n      Interval mesozoic = new Interval(66E6, 252E6);\n      Interval jurassic = new Interval(145E6, 201E6);\n      StdOut.println(\"The Mesozoic is \" + mesozoic.toString());\n      StdOut.println(\"The Jurassic is \" + jurassic); // implicit toString\n      StdOut.println(mesozoic.intersects(jurassic)); // true\n      StdOut.println(jurassic.subsetOf(mesozoic));   // true\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52
        }
    ],
    "initial_snippets": [
        "\n\n\n",
        "\n\n\n\n\n\n\n\n\n",
        "\n\n",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    ],
    "json_template": [
        "public class Interval {\n   // instance variables",
        "\n\n\n",
        "   // constructor",
        "\n\n\n\n\n\n\n\n\n",
        "   // text representation\n   public String toString() {\n      // if you want, use String.format(\"%.6e\", ...);",
        "\n\n",
        "   }\n   // other instance methods",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "   // use \"this\" to just reuse previous logic\n   public boolean supersetOf(Interval other) {\n      return other.subsetOf(this);\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      // counting years BCE to avoid negative signs\n      Interval mesozoic = new Interval(66E6, 252E6);\n      Interval jurassic = new Interval(145E6, 201E6);\n      StdOut.println(\"The Mesozoic is \" + mesozoic.toString());\n      StdOut.println(\"The Jurassic is \" + jurassic); // implicit toString\n      StdOut.println(mesozoic.intersects(jurassic)); // true\n      StdOut.println(jurassic.subsetOf(mesozoic));   // true\n   }\n}"
    ],
    "combined_with_initial": [
        false,
        "Line 5, editable region 1:\nmust not be empty"
    ],
    "daveagp": [
        "\n   double lo, hi;\n\n",
        "\n   public Interval(double lo, double hi) {\n      this.lo = lo;\n      this.hi = hi;\n      if (lo > hi) throw new RuntimeException();\n   }\n\n\n\n",
        "\n      return  (\"[\"+lo+\", \"+hi+\"]\");\n",
        "\n   public boolean contains(double x) {\n      return x>=lo && x<=hi;\n   }\n   \n   public boolean intersects(Interval other) {\n      return !(lo>other.hi || hi<other.lo);\n   }\n\n   public boolean subsetOf(Interval other) {\n      return lo>=other.lo && hi<=other.hi;\n   }\n\n\n\n\n\n"
    ],
    "reference_snippets": [
        "\n   double lo; // minimum value in this Interval\n   double hi; // maximum value in this Interval\n",
        "\n   public Interval(double lo, double hi) {\n      if (hi < lo)\n        throw new RuntimeException(\"Empty interval!\");\n   \n      // copy data from constructor parameters to instance vars\n      this.lo = lo;\n      this.hi = hi;\n   }\n",
        "\n      return String.format(\"[%.6e, %.6e]\", lo, hi);\n",
        "\n   // is x in this interval?\n   public boolean contains(double x) {\n      return x >= lo && x <= hi;\n   }\n   \n   // do these intervals intersect?\n   public boolean intersects(Interval other) {\n      if (this.lo > other.hi) return false; // this is to the right of other\n      if (other.lo > this.hi) return false; // other is to the right of this\n      return true; // otherwise, they intersect\n   }\n   \n   // is other a subset of this interval?\n   public boolean subsetOf(Interval other) {\n      return other.lo <= lo && other.hi >= hi;\n   }\n"
    ],
    "combined_with_reference": [
        true,
        "package combined.reference;\nimport stdlibpack.*;\npublic class Interval {\n   // instance variables\n   double lo; // minimum value in this Interval\n   double hi; // maximum value in this Interval\n   // constructor\n   public Interval(double lo, double hi) {\n      if (hi < lo)\n        throw new RuntimeException(\"Empty interval!\");\n   \n      // copy data from constructor parameters to instance vars\n      this.lo = lo;\n      this.hi = hi;\n   }\n   // text representation\n   public String toString() {\n      // if you want, use String.format(\"%.6e\", ...);\n      return String.format(\"[%.6e, %.6e]\", lo, hi);\n   }\n   // other instance methods\n   // is x in this interval?\n   public boolean contains(double x) {\n      return x >= lo && x <= hi;\n   }\n   \n   // do these intervals intersect?\n   public boolean intersects(Interval other) {\n      if (this.lo > other.hi) return false; // this is to the right of other\n      if (other.lo > this.hi) return false; // other is to the right of this\n      return true; // otherwise, they intersect\n   }\n   \n   // is other a subset of this interval?\n   public boolean subsetOf(Interval other) {\n      return other.lo <= lo && other.hi >= hi;\n   }\n   // use \"this\" to just reuse previous logic\n   public boolean supersetOf(Interval other) {\n      return other.subsetOf(this);\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      // counting years BCE to avoid negative signs\n      Interval mesozoic = new Interval(66E6, 252E6);\n      Interval jurassic = new Interval(145E6, 201E6);\n      StdOut.println(\"The Mesozoic is \" + mesozoic.toString());\n      StdOut.println(\"The Jurassic is \" + jurassic); // implicit toString\n      StdOut.println(mesozoic.intersects(jurassic)); // true\n      StdOut.println(jurassic.subsetOf(mesozoic));   // true\n   }\n}\n",
        {
            "3": 1,
            "4": 2,
            "5": 3,
            "6": 4,
            "7": 5,
            "8": 6,
            "9": 7,
            "10": 8,
            "11": 9,
            "12": 10,
            "13": 11,
            "14": 12,
            "15": 13,
            "16": 14,
            "17": 15,
            "18": 16,
            "19": 17,
            "20": 18,
            "21": 19,
            "22": 20,
            "23": 21,
            "24": 22,
            "25": 23,
            "26": 24,
            "27": 25,
            "28": 26,
            "29": 27,
            "30": 28,
            "31": 29,
            "32": 30,
            "33": 31,
            "34": 32,
            "35": 33,
            "36": 34,
            "37": 35,
            "38": 36,
            "39": 37,
            "40": 38,
            "41": 39,
            "42": 40,
            "43": 41,
            "44": 42,
            "45": 43,
            "46": 44,
            "47": 45,
            "48": 46,
            "49": 47,
            "50": 48,
            "51": 49,
            "52": 50,
            "53": 51,
            "54": 52
        }
    ],
    "reference_solution": "package reference;\nimport stdlibpack.*;\npublic class Interval {\n   // instance variables\n   double lo; // minimum value in this Interval\n   double hi; // maximum value in this Interval\n   // constructor\n   public Interval(double lo, double hi) {\n      if (hi < lo)\n        throw new RuntimeException(\"Empty interval!\");\n   \n      // copy data from constructor parameters to instance vars\n      this.lo = lo;\n      this.hi = hi;\n   }\n   // text representation\n   public String toString() {\n      // if you want, use String.format(\"%.6e\", ...);\n      return String.format(\"[%.6e, %.6e]\", lo, hi);\n   }\n   // other instance methods\n   // is x in this interval?\n   public boolean contains(double x) {\n      return x >= lo && x <= hi;\n   }\n   \n   // do these intervals intersect?\n   public boolean intersects(Interval other) {\n      if (this.lo > other.hi) return false; // this is to the right of other\n      if (other.lo > this.hi) return false; // other is to the right of this\n      return true; // otherwise, they intersect\n   }\n   \n   // is other a subset of this interval?\n   public boolean subsetOf(Interval other) {\n      return other.lo <= lo && other.hi >= hi;\n   }\n   // use \"this\" to just reuse previous logic\n   public boolean supersetOf(Interval other) {\n      return other.subsetOf(this);\n   }\n   \n   // test client\n   public static void main(String[] args) {\n      // counting years BCE to avoid negative signs\n      Interval mesozoic = new Interval(66E6, 252E6);\n      Interval jurassic = new Interval(145E6, 201E6);\n      StdOut.println(\"The Mesozoic is \" + mesozoic.toString());\n      StdOut.println(\"The Jurassic is \" + jurassic); // implicit toString\n      StdOut.println(mesozoic.intersects(jurassic)); // true\n      StdOut.println(jurassic.subsetOf(mesozoic));   // true\n   }\n}\n"
}
